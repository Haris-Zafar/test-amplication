datasource db {
  provider = "mongodb"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Product {
  category         Category               @relation(fields: [categoryId], references: [id])
  categoryId       String                 @db.ObjectId
  company          Company                @relation(fields: [companyId], references: [id])
  companyId        String                 @db.ObjectId
  createdAt        DateTime               @default(now())
  customerPrices   CustomerProductPrice[]
  demandListItem   DemandListItem[]
  description      String?
  expiryDate       DateTime?
  id               String                 @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  orderItems       OrderItem[]
  purchaseItem     PurchaseItem[]
  purchasePrice    Float
  reorderLevel     Int?
  retailPrice      Float?
  sellPrice        Float
  size             String?
  sku              String                 @unique
  stockQuantity    Int                    @default(0)
  supplierProducts SupplierProduct[]
  tags             TagsOnProduct[]
  updatedAt        DateTime               @updatedAt
  weight           Float?
  weightUnit       EnumProductWeightUnit?
}

model Category {
  createdAt   DateTime  @default(now())
  description String?
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  products    Product[]
  updatedAt   DateTime  @updatedAt
}

model Tag {
  createdAt DateTime        @default(now())
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  name      String          @unique
  products  TagsOnProduct[]
  updatedAt DateTime        @updatedAt
}

model TagsOnProduct {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
  tag       Tag     @relation(fields: [tagId], references: [id])
  tagId     String  @db.ObjectId

  @@unique([productId, tagId])
  @@map("TagsOnProducts")
}

model Company {
  address       String?
  contactPerson String?
  createdAt     DateTime  @default(now())
  email         String?
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String    @unique
  phone         String?
  products      Product[]
  updatedAt     DateTime  @updatedAt
}

model Supplier {
  address          String
  contactPerson    String
  createdAt        DateTime          @default(now())
  demandLists      DemandList[]
  email            String            @unique
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  payments         SupplierPayment[]
  phone            String
  purchases        Purchase[]
  reliabilityScore Float?
  supplierProducts SupplierProduct[]
  updatedAt        DateTime          @updatedAt
}

model SupplierProduct {
  availability     Boolean        @default(true)
  createdAt        DateTime       @default(now())
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  lastPurchaseDate DateTime?
  product          Product        @relation(fields: [productId], references: [id])
  productId        String         @db.ObjectId
  purchaseItems    PurchaseItem[]
  purchasePrice    Float
  supplier         Supplier       @relation(fields: [supplierId], references: [id])
  supplierId       String         @db.ObjectId
  supplierSku      String?
  updatedAt        DateTime       @updatedAt

  @@unique([supplierId, productId])
}

model Customer {
  address            String
  contactPerson      String
  createdAt          DateTime               @default(now())
  customPrices       CustomerProductPrice[]
  email              String                 @unique
  id                 String                 @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  orders             Order[]
  outstandingBalance Float                  @default(0)
  payments           CustomerPayment[]
  phone              String
  totalPurchases     Float                  @default(0)
  updatedAt          DateTime               @updatedAt
}

model CustomerProductPrice {
  createdAt    DateTime @default(now())
  customer     Customer @relation(fields: [customerId], references: [id])
  customerId   String   @db.ObjectId
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  product      Product  @relation(fields: [productId], references: [id])
  productId    String   @db.ObjectId
  specialPrice Float
  updatedAt    DateTime @updatedAt

  @@unique([customerId, productId])
}

model Order {
  advancePayment  Float             @default(0)
  createdAt       DateTime          @default(now())
  customer        Customer          @relation(fields: [customerId], references: [id])
  customerId      String            @db.ObjectId
  dueDate         DateTime?
  fulfillmentDate DateTime?
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  items           OrderItem[]
  orderDate       DateTime          @default(now())
  orderNumber     String            @unique
  paidAmount      Float             @default(0)
  payments        CustomerPayment[]
  status          EnumOrderStatus   @default(PENDING)
  totalAmount     Float
  updatedAt       DateTime          @updatedAt
}

model OrderItem {
  createdAt         DateTime            @default(now())
  demandListItems   DemandListItem[]
  fulfilledQuantity Int                 @default(0)
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  order             Order               @relation(fields: [orderId], references: [id])
  orderId           String              @db.ObjectId
  product           Product             @relation(fields: [productId], references: [id])
  productId         String              @db.ObjectId
  quantity          Int
  sellPrice         Float
  status            EnumOrderItemStatus @default(PENDING)
  updatedAt         DateTime            @updatedAt
}

model DemandList {
  createdAt     DateTime             @default(now())
  demandDate    DateTime             @default(now())
  estimatedCost Float
  id            String               @id @default(auto()) @map("_id") @db.ObjectId
  items         DemandListItem[]
  purchase      Purchase?
  status        EnumDemandListStatus @default(DRAFT)
  supplier      Supplier             @relation(fields: [supplierId], references: [id])
  supplierId    String               @db.ObjectId
  updatedAt     DateTime             @updatedAt
}

model DemandListItem {
  confirmedQuantity Int?
  createdAt         DateTime                 @default(now())
  demandList        DemandList               @relation(fields: [demandListId], references: [id])
  demandListId      String                   @db.ObjectId
  id                String                   @id @default(auto()) @map("_id") @db.ObjectId
  orderItem         OrderItem?               @relation(fields: [orderItemId], references: [id])
  orderItemId       String?                  @db.ObjectId
  product           Product                  @relation(fields: [productId], references: [id])
  productId         String                   @db.ObjectId
  purchaseItem      PurchaseItem?
  requestedQuantity Int
  status            EnumDemandListItemStatus @default(PENDING)
  updatedAt         DateTime                 @updatedAt
}

model Purchase {
  createdAt      DateTime          @default(now())
  demandList     DemandList        @relation(fields: [demandListId], references: [id])
  demandListId   String            @unique @db.ObjectId
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  items          PurchaseItem[]
  paidAmount     Float             @default(0)
  payments       SupplierPayment[]
  purchaseDate   DateTime          @default(now())
  purchaseNumber String            @unique
  supplier       Supplier          @relation(fields: [supplierId], references: [id])
  supplierId     String            @db.ObjectId
  totalAmount    Float
  updatedAt      DateTime          @updatedAt
}

model PurchaseItem {
  createdAt         DateTime        @default(now())
  demandListItem    DemandListItem  @relation(fields: [demandListItemId], references: [id])
  demandListItemId  String          @unique @db.ObjectId
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  product           Product         @relation(fields: [productId], references: [id])
  productId         String          @db.ObjectId
  purchase          Purchase        @relation(fields: [purchaseId], references: [id])
  purchaseId        String          @db.ObjectId
  purchasePrice     Float
  quantity          Int
  supplierProduct   SupplierProduct @relation(fields: [supplierProductId], references: [id])
  supplierProductId String          @db.ObjectId
  updatedAt         DateTime        @updatedAt
}

model SupplierPayment {
  amount        Float
  createdAt     DateTime                         @default(now())
  id            String                           @id @default(auto()) @map("_id") @db.ObjectId
  notes         String?
  paymentDate   DateTime                         @default(now())
  paymentMethod EnumSupplierPaymentPaymentMethod
  purchase      Purchase?                        @relation(fields: [purchaseId], references: [id])
  purchaseId    String?                          @db.ObjectId
  reference     String?
  supplier      Supplier                         @relation(fields: [supplierId], references: [id])
  supplierId    String                           @db.ObjectId
  updatedAt     DateTime                         @updatedAt
}

model CustomerPayment {
  amount        Float
  createdAt     DateTime                         @default(now())
  customer      Customer                         @relation(fields: [customerId], references: [id])
  customerId    String                           @db.ObjectId
  id            String                           @id @default(auto()) @map("_id") @db.ObjectId
  notes         String?
  order         Order?                           @relation(fields: [orderId], references: [id])
  orderId       String?                          @db.ObjectId
  paymentDate   DateTime                         @default(now())
  paymentMethod EnumCustomerPaymentPaymentMethod
  reference     String?
  updatedAt     DateTime                         @updatedAt
}

model User {
  createdAt DateTime @default(now())
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  password  String?
  role      Json
  updatedAt DateTime @updatedAt
  username  String   @unique
}

enum EnumProductWeightUnit {
  G
  ML
  KG
  L
}

enum EnumOrderStatus {
  PENDING
  PARTIAL
  COMPLETE
  CANCELLED
}

enum EnumOrderItemStatus {
  PENDING
  PARTIAL
  COMPLETE
  CANCELLED
}

enum EnumDemandListStatus {
  DRAFT
  SUBMITTED
  CONFIRMED
  PARTIAL
  COMPLETE
  CANCELLED
}

enum EnumDemandListItemStatus {
  PENDING
  CONFIRMED
  UNAVAILABLE
  TRANSFERRED
  PURCHASED
  CANCELLED
}

enum EnumSupplierPaymentPaymentMethod {
  CASH
  BANK_TRANSFER
  CHECK
  CREDIT
  OTHER
}

enum EnumCustomerPaymentPaymentMethod {
  CASH
  BANK_TRANSFER
  CHECK
  CREDIT
  OTHER
}
