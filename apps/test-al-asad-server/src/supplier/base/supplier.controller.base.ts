/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SupplierService } from "../supplier.service";
import { SupplierCreateInput } from "./SupplierCreateInput";
import { Supplier } from "./Supplier";
import { SupplierFindManyArgs } from "./SupplierFindManyArgs";
import { SupplierWhereUniqueInput } from "./SupplierWhereUniqueInput";
import { SupplierUpdateInput } from "./SupplierUpdateInput";
import { DemandListFindManyArgs } from "../../demandList/base/DemandListFindManyArgs";
import { DemandList } from "../../demandList/base/DemandList";
import { DemandListWhereUniqueInput } from "../../demandList/base/DemandListWhereUniqueInput";
import { SupplierPaymentFindManyArgs } from "../../supplierPayment/base/SupplierPaymentFindManyArgs";
import { SupplierPayment } from "../../supplierPayment/base/SupplierPayment";
import { SupplierPaymentWhereUniqueInput } from "../../supplierPayment/base/SupplierPaymentWhereUniqueInput";
import { PurchaseFindManyArgs } from "../../purchase/base/PurchaseFindManyArgs";
import { Purchase } from "../../purchase/base/Purchase";
import { PurchaseWhereUniqueInput } from "../../purchase/base/PurchaseWhereUniqueInput";
import { SupplierProductFindManyArgs } from "../../supplierProduct/base/SupplierProductFindManyArgs";
import { SupplierProduct } from "../../supplierProduct/base/SupplierProduct";
import { SupplierProductWhereUniqueInput } from "../../supplierProduct/base/SupplierProductWhereUniqueInput";

export class SupplierControllerBase {
  constructor(protected readonly service: SupplierService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Supplier })
  async createSupplier(
    @common.Body() data: SupplierCreateInput
  ): Promise<Supplier> {
    return await this.service.createSupplier({
      data: data,
      select: {
        address: true,
        contactPerson: true,
        createdAt: true,
        email: true,
        id: true,
        name: true,
        phone: true,
        reliabilityScore: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Supplier] })
  @ApiNestedQuery(SupplierFindManyArgs)
  async suppliers(@common.Req() request: Request): Promise<Supplier[]> {
    const args = plainToClass(SupplierFindManyArgs, request.query);
    return this.service.suppliers({
      ...args,
      select: {
        address: true,
        contactPerson: true,
        createdAt: true,
        email: true,
        id: true,
        name: true,
        phone: true,
        reliabilityScore: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Supplier })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async supplier(
    @common.Param() params: SupplierWhereUniqueInput
  ): Promise<Supplier | null> {
    const result = await this.service.supplier({
      where: params,
      select: {
        address: true,
        contactPerson: true,
        createdAt: true,
        email: true,
        id: true,
        name: true,
        phone: true,
        reliabilityScore: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Supplier })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSupplier(
    @common.Param() params: SupplierWhereUniqueInput,
    @common.Body() data: SupplierUpdateInput
  ): Promise<Supplier | null> {
    try {
      return await this.service.updateSupplier({
        where: params,
        data: data,
        select: {
          address: true,
          contactPerson: true,
          createdAt: true,
          email: true,
          id: true,
          name: true,
          phone: true,
          reliabilityScore: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Supplier })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSupplier(
    @common.Param() params: SupplierWhereUniqueInput
  ): Promise<Supplier | null> {
    try {
      return await this.service.deleteSupplier({
        where: params,
        select: {
          address: true,
          contactPerson: true,
          createdAt: true,
          email: true,
          id: true,
          name: true,
          phone: true,
          reliabilityScore: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/demandLists")
  @ApiNestedQuery(DemandListFindManyArgs)
  async findDemandLists(
    @common.Req() request: Request,
    @common.Param() params: SupplierWhereUniqueInput
  ): Promise<DemandList[]> {
    const query = plainToClass(DemandListFindManyArgs, request.query);
    const results = await this.service.findDemandLists(params.id, {
      ...query,
      select: {
        createdAt: true,
        demandDate: true,
        estimatedCost: true,
        id: true,

        purchase: {
          select: {
            id: true,
          },
        },

        status: true,

        supplier: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/demandLists")
  async connectDemandLists(
    @common.Param() params: SupplierWhereUniqueInput,
    @common.Body() body: DemandListWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      demandLists: {
        connect: body,
      },
    };
    await this.service.updateSupplier({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/demandLists")
  async updateDemandLists(
    @common.Param() params: SupplierWhereUniqueInput,
    @common.Body() body: DemandListWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      demandLists: {
        set: body,
      },
    };
    await this.service.updateSupplier({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/demandLists")
  async disconnectDemandLists(
    @common.Param() params: SupplierWhereUniqueInput,
    @common.Body() body: DemandListWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      demandLists: {
        disconnect: body,
      },
    };
    await this.service.updateSupplier({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/payments")
  @ApiNestedQuery(SupplierPaymentFindManyArgs)
  async findPayments(
    @common.Req() request: Request,
    @common.Param() params: SupplierWhereUniqueInput
  ): Promise<SupplierPayment[]> {
    const query = plainToClass(SupplierPaymentFindManyArgs, request.query);
    const results = await this.service.findPayments(params.id, {
      ...query,
      select: {
        amount: true,
        createdAt: true,
        id: true,
        notes: true,
        paymentDate: true,
        paymentMethod: true,

        purchase: {
          select: {
            id: true,
          },
        },

        reference: true,

        supplier: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/payments")
  async connectPayments(
    @common.Param() params: SupplierWhereUniqueInput,
    @common.Body() body: SupplierPaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payments: {
        connect: body,
      },
    };
    await this.service.updateSupplier({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/payments")
  async updatePayments(
    @common.Param() params: SupplierWhereUniqueInput,
    @common.Body() body: SupplierPaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payments: {
        set: body,
      },
    };
    await this.service.updateSupplier({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/payments")
  async disconnectPayments(
    @common.Param() params: SupplierWhereUniqueInput,
    @common.Body() body: SupplierPaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payments: {
        disconnect: body,
      },
    };
    await this.service.updateSupplier({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/purchases")
  @ApiNestedQuery(PurchaseFindManyArgs)
  async findPurchases(
    @common.Req() request: Request,
    @common.Param() params: SupplierWhereUniqueInput
  ): Promise<Purchase[]> {
    const query = plainToClass(PurchaseFindManyArgs, request.query);
    const results = await this.service.findPurchases(params.id, {
      ...query,
      select: {
        createdAt: true,

        demandList: {
          select: {
            id: true,
          },
        },

        id: true,
        paidAmount: true,
        purchaseDate: true,
        purchaseNumber: true,

        supplier: {
          select: {
            id: true,
          },
        },

        totalAmount: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/purchases")
  async connectPurchases(
    @common.Param() params: SupplierWhereUniqueInput,
    @common.Body() body: PurchaseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchases: {
        connect: body,
      },
    };
    await this.service.updateSupplier({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/purchases")
  async updatePurchases(
    @common.Param() params: SupplierWhereUniqueInput,
    @common.Body() body: PurchaseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchases: {
        set: body,
      },
    };
    await this.service.updateSupplier({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/purchases")
  async disconnectPurchases(
    @common.Param() params: SupplierWhereUniqueInput,
    @common.Body() body: PurchaseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchases: {
        disconnect: body,
      },
    };
    await this.service.updateSupplier({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/supplierProducts")
  @ApiNestedQuery(SupplierProductFindManyArgs)
  async findSupplierProducts(
    @common.Req() request: Request,
    @common.Param() params: SupplierWhereUniqueInput
  ): Promise<SupplierProduct[]> {
    const query = plainToClass(SupplierProductFindManyArgs, request.query);
    const results = await this.service.findSupplierProducts(params.id, {
      ...query,
      select: {
        availability: true,
        createdAt: true,
        id: true,
        lastPurchaseDate: true,

        product: {
          select: {
            id: true,
          },
        },

        purchasePrice: true,

        supplier: {
          select: {
            id: true,
          },
        },

        supplierSku: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/supplierProducts")
  async connectSupplierProducts(
    @common.Param() params: SupplierWhereUniqueInput,
    @common.Body() body: SupplierProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      supplierProducts: {
        connect: body,
      },
    };
    await this.service.updateSupplier({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/supplierProducts")
  async updateSupplierProducts(
    @common.Param() params: SupplierWhereUniqueInput,
    @common.Body() body: SupplierProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      supplierProducts: {
        set: body,
      },
    };
    await this.service.updateSupplier({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/supplierProducts")
  async disconnectSupplierProducts(
    @common.Param() params: SupplierWhereUniqueInput,
    @common.Body() body: SupplierProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      supplierProducts: {
        disconnect: body,
      },
    };
    await this.service.updateSupplier({
      where: params,
      data,
      select: { id: true },
    });
  }
}
