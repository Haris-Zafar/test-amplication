/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { StringFilter } from "../../util/StringFilter";
import { Type } from "class-transformer";
import { IsOptional, ValidateNested } from "class-validator";
import { DateTimeFilter } from "../../util/DateTimeFilter";
import { DemandListListRelationFilter } from "../../demandList/base/DemandListListRelationFilter";
import { SupplierPaymentListRelationFilter } from "../../supplierPayment/base/SupplierPaymentListRelationFilter";
import { PurchaseListRelationFilter } from "../../purchase/base/PurchaseListRelationFilter";
import { FloatNullableFilter } from "../../util/FloatNullableFilter";
import { SupplierProductListRelationFilter } from "../../supplierProduct/base/SupplierProductListRelationFilter";

@InputType()
class SupplierWhereInput {
  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  address?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  contactPerson?: StringFilter;

  @ApiProperty({
    required: false,
    type: DateTimeFilter,
  })
  @Type(() => DateTimeFilter)
  @IsOptional()
  @Field(() => DateTimeFilter, {
    nullable: true,
  })
  createdAt?: DateTimeFilter;

  @ApiProperty({
    required: false,
    type: () => DemandListListRelationFilter,
  })
  @ValidateNested()
  @Type(() => DemandListListRelationFilter)
  @IsOptional()
  @Field(() => DemandListListRelationFilter, {
    nullable: true,
  })
  demandLists?: DemandListListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  email?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  name?: StringFilter;

  @ApiProperty({
    required: false,
    type: () => SupplierPaymentListRelationFilter,
  })
  @ValidateNested()
  @Type(() => SupplierPaymentListRelationFilter)
  @IsOptional()
  @Field(() => SupplierPaymentListRelationFilter, {
    nullable: true,
  })
  payments?: SupplierPaymentListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  phone?: StringFilter;

  @ApiProperty({
    required: false,
    type: () => PurchaseListRelationFilter,
  })
  @ValidateNested()
  @Type(() => PurchaseListRelationFilter)
  @IsOptional()
  @Field(() => PurchaseListRelationFilter, {
    nullable: true,
  })
  purchases?: PurchaseListRelationFilter;

  @ApiProperty({
    required: false,
    type: FloatNullableFilter,
  })
  @Type(() => FloatNullableFilter)
  @IsOptional()
  @Field(() => FloatNullableFilter, {
    nullable: true,
  })
  reliabilityScore?: FloatNullableFilter;

  @ApiProperty({
    required: false,
    type: () => SupplierProductListRelationFilter,
  })
  @ValidateNested()
  @Type(() => SupplierProductListRelationFilter)
  @IsOptional()
  @Field(() => SupplierProductListRelationFilter, {
    nullable: true,
  })
  supplierProducts?: SupplierProductListRelationFilter;

  @ApiProperty({
    required: false,
    type: DateTimeFilter,
  })
  @Type(() => DateTimeFilter)
  @IsOptional()
  @Field(() => DateTimeFilter, {
    nullable: true,
  })
  updatedAt?: DateTimeFilter;
}

export { SupplierWhereInput as SupplierWhereInput };
