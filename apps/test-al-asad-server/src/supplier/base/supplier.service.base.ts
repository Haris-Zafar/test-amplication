/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Supplier as PrismaSupplier,
  DemandList as PrismaDemandList,
  SupplierPayment as PrismaSupplierPayment,
  Purchase as PrismaPurchase,
  SupplierProduct as PrismaSupplierProduct,
} from "@prisma/client";

export class SupplierServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SupplierCountArgs, "select">): Promise<number> {
    return this.prisma.supplier.count(args);
  }

  async suppliers(
    args: Prisma.SupplierFindManyArgs
  ): Promise<PrismaSupplier[]> {
    return this.prisma.supplier.findMany(args);
  }
  async supplier(
    args: Prisma.SupplierFindUniqueArgs
  ): Promise<PrismaSupplier | null> {
    return this.prisma.supplier.findUnique(args);
  }
  async createSupplier(
    args: Prisma.SupplierCreateArgs
  ): Promise<PrismaSupplier> {
    return this.prisma.supplier.create(args);
  }
  async updateSupplier(
    args: Prisma.SupplierUpdateArgs
  ): Promise<PrismaSupplier> {
    return this.prisma.supplier.update(args);
  }
  async deleteSupplier(
    args: Prisma.SupplierDeleteArgs
  ): Promise<PrismaSupplier> {
    return this.prisma.supplier.delete(args);
  }

  async findDemandLists(
    parentId: string,
    args: Prisma.DemandListFindManyArgs
  ): Promise<PrismaDemandList[]> {
    return this.prisma.supplier
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .demandLists(args);
  }

  async findPayments(
    parentId: string,
    args: Prisma.SupplierPaymentFindManyArgs
  ): Promise<PrismaSupplierPayment[]> {
    return this.prisma.supplier
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .payments(args);
  }

  async findPurchases(
    parentId: string,
    args: Prisma.PurchaseFindManyArgs
  ): Promise<PrismaPurchase[]> {
    return this.prisma.supplier
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .purchases(args);
  }

  async findSupplierProducts(
    parentId: string,
    args: Prisma.SupplierProductFindManyArgs
  ): Promise<PrismaSupplierProduct[]> {
    return this.prisma.supplier
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .supplierProducts(args);
  }
}
