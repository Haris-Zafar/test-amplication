/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CustomerProductPriceService } from "../customerProductPrice.service";
import { CustomerProductPriceCreateInput } from "./CustomerProductPriceCreateInput";
import { CustomerProductPrice } from "./CustomerProductPrice";
import { CustomerProductPriceFindManyArgs } from "./CustomerProductPriceFindManyArgs";
import { CustomerProductPriceWhereUniqueInput } from "./CustomerProductPriceWhereUniqueInput";
import { CustomerProductPriceUpdateInput } from "./CustomerProductPriceUpdateInput";

export class CustomerProductPriceControllerBase {
  constructor(protected readonly service: CustomerProductPriceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CustomerProductPrice })
  async createCustomerProductPrice(
    @common.Body() data: CustomerProductPriceCreateInput
  ): Promise<CustomerProductPrice> {
    return await this.service.createCustomerProductPrice({
      data: {
        ...data,

        customer: {
          connect: data.customer,
        },

        product: {
          connect: data.product,
        },
      },
      select: {
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        id: true,

        product: {
          select: {
            id: true,
          },
        },

        specialPrice: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CustomerProductPrice] })
  @ApiNestedQuery(CustomerProductPriceFindManyArgs)
  async customerProductPrices(
    @common.Req() request: Request
  ): Promise<CustomerProductPrice[]> {
    const args = plainToClass(CustomerProductPriceFindManyArgs, request.query);
    return this.service.customerProductPrices({
      ...args,
      select: {
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        id: true,

        product: {
          select: {
            id: true,
          },
        },

        specialPrice: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CustomerProductPrice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async customerProductPrice(
    @common.Param() params: CustomerProductPriceWhereUniqueInput
  ): Promise<CustomerProductPrice | null> {
    const result = await this.service.customerProductPrice({
      where: params,
      select: {
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        id: true,

        product: {
          select: {
            id: true,
          },
        },

        specialPrice: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CustomerProductPrice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCustomerProductPrice(
    @common.Param() params: CustomerProductPriceWhereUniqueInput,
    @common.Body() data: CustomerProductPriceUpdateInput
  ): Promise<CustomerProductPrice | null> {
    try {
      return await this.service.updateCustomerProductPrice({
        where: params,
        data: {
          ...data,

          customer: {
            connect: data.customer,
          },

          product: {
            connect: data.product,
          },
        },
        select: {
          createdAt: true,

          customer: {
            select: {
              id: true,
            },
          },

          id: true,

          product: {
            select: {
              id: true,
            },
          },

          specialPrice: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CustomerProductPrice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCustomerProductPrice(
    @common.Param() params: CustomerProductPriceWhereUniqueInput
  ): Promise<CustomerProductPrice | null> {
    try {
      return await this.service.deleteCustomerProductPrice({
        where: params,
        select: {
          createdAt: true,

          customer: {
            select: {
              id: true,
            },
          },

          id: true,

          product: {
            select: {
              id: true,
            },
          },

          specialPrice: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
