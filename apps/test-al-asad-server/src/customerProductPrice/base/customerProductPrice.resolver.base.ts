/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CustomerProductPrice } from "./CustomerProductPrice";
import { CustomerProductPriceCountArgs } from "./CustomerProductPriceCountArgs";
import { CustomerProductPriceFindManyArgs } from "./CustomerProductPriceFindManyArgs";
import { CustomerProductPriceFindUniqueArgs } from "./CustomerProductPriceFindUniqueArgs";
import { CreateCustomerProductPriceArgs } from "./CreateCustomerProductPriceArgs";
import { UpdateCustomerProductPriceArgs } from "./UpdateCustomerProductPriceArgs";
import { DeleteCustomerProductPriceArgs } from "./DeleteCustomerProductPriceArgs";
import { Customer } from "../../customer/base/Customer";
import { Product } from "../../product/base/Product";
import { CustomerProductPriceService } from "../customerProductPrice.service";
@graphql.Resolver(() => CustomerProductPrice)
export class CustomerProductPriceResolverBase {
  constructor(protected readonly service: CustomerProductPriceService) {}

  async _customerProductPricesMeta(
    @graphql.Args() args: CustomerProductPriceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CustomerProductPrice])
  async customerProductPrices(
    @graphql.Args() args: CustomerProductPriceFindManyArgs
  ): Promise<CustomerProductPrice[]> {
    return this.service.customerProductPrices(args);
  }

  @graphql.Query(() => CustomerProductPrice, { nullable: true })
  async customerProductPrice(
    @graphql.Args() args: CustomerProductPriceFindUniqueArgs
  ): Promise<CustomerProductPrice | null> {
    const result = await this.service.customerProductPrice(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CustomerProductPrice)
  async createCustomerProductPrice(
    @graphql.Args() args: CreateCustomerProductPriceArgs
  ): Promise<CustomerProductPrice> {
    return await this.service.createCustomerProductPrice({
      ...args,
      data: {
        ...args.data,

        customer: {
          connect: args.data.customer,
        },

        product: {
          connect: args.data.product,
        },
      },
    });
  }

  @graphql.Mutation(() => CustomerProductPrice)
  async updateCustomerProductPrice(
    @graphql.Args() args: UpdateCustomerProductPriceArgs
  ): Promise<CustomerProductPrice | null> {
    try {
      return await this.service.updateCustomerProductPrice({
        ...args,
        data: {
          ...args.data,

          customer: {
            connect: args.data.customer,
          },

          product: {
            connect: args.data.product,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CustomerProductPrice)
  async deleteCustomerProductPrice(
    @graphql.Args() args: DeleteCustomerProductPriceArgs
  ): Promise<CustomerProductPrice | null> {
    try {
      return await this.service.deleteCustomerProductPrice(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Customer, {
    nullable: true,
    name: "customer",
  })
  async getCustomer(
    @graphql.Parent() parent: CustomerProductPrice
  ): Promise<Customer | null> {
    const result = await this.service.getCustomer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Product, {
    nullable: true,
    name: "product",
  })
  async getProduct(
    @graphql.Parent() parent: CustomerProductPrice
  ): Promise<Product | null> {
    const result = await this.service.getProduct(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
