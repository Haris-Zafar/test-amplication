/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PurchaseItemService } from "../purchaseItem.service";
import { PurchaseItemCreateInput } from "./PurchaseItemCreateInput";
import { PurchaseItem } from "./PurchaseItem";
import { PurchaseItemFindManyArgs } from "./PurchaseItemFindManyArgs";
import { PurchaseItemWhereUniqueInput } from "./PurchaseItemWhereUniqueInput";
import { PurchaseItemUpdateInput } from "./PurchaseItemUpdateInput";

export class PurchaseItemControllerBase {
  constructor(protected readonly service: PurchaseItemService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PurchaseItem })
  async createPurchaseItem(
    @common.Body() data: PurchaseItemCreateInput
  ): Promise<PurchaseItem> {
    return await this.service.createPurchaseItem({
      data: {
        ...data,

        demandListItem: {
          connect: data.demandListItem,
        },

        product: {
          connect: data.product,
        },

        purchase: {
          connect: data.purchase,
        },

        supplierProduct: {
          connect: data.supplierProduct,
        },
      },
      select: {
        createdAt: true,

        demandListItem: {
          select: {
            id: true,
          },
        },

        id: true,

        product: {
          select: {
            id: true,
          },
        },

        purchase: {
          select: {
            id: true,
          },
        },

        purchasePrice: true,
        quantity: true,

        supplierProduct: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PurchaseItem] })
  @ApiNestedQuery(PurchaseItemFindManyArgs)
  async purchaseItems(@common.Req() request: Request): Promise<PurchaseItem[]> {
    const args = plainToClass(PurchaseItemFindManyArgs, request.query);
    return this.service.purchaseItems({
      ...args,
      select: {
        createdAt: true,

        demandListItem: {
          select: {
            id: true,
          },
        },

        id: true,

        product: {
          select: {
            id: true,
          },
        },

        purchase: {
          select: {
            id: true,
          },
        },

        purchasePrice: true,
        quantity: true,

        supplierProduct: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PurchaseItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async purchaseItem(
    @common.Param() params: PurchaseItemWhereUniqueInput
  ): Promise<PurchaseItem | null> {
    const result = await this.service.purchaseItem({
      where: params,
      select: {
        createdAt: true,

        demandListItem: {
          select: {
            id: true,
          },
        },

        id: true,

        product: {
          select: {
            id: true,
          },
        },

        purchase: {
          select: {
            id: true,
          },
        },

        purchasePrice: true,
        quantity: true,

        supplierProduct: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PurchaseItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePurchaseItem(
    @common.Param() params: PurchaseItemWhereUniqueInput,
    @common.Body() data: PurchaseItemUpdateInput
  ): Promise<PurchaseItem | null> {
    try {
      return await this.service.updatePurchaseItem({
        where: params,
        data: {
          ...data,

          demandListItem: {
            connect: data.demandListItem,
          },

          product: {
            connect: data.product,
          },

          purchase: {
            connect: data.purchase,
          },

          supplierProduct: {
            connect: data.supplierProduct,
          },
        },
        select: {
          createdAt: true,

          demandListItem: {
            select: {
              id: true,
            },
          },

          id: true,

          product: {
            select: {
              id: true,
            },
          },

          purchase: {
            select: {
              id: true,
            },
          },

          purchasePrice: true,
          quantity: true,

          supplierProduct: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PurchaseItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePurchaseItem(
    @common.Param() params: PurchaseItemWhereUniqueInput
  ): Promise<PurchaseItem | null> {
    try {
      return await this.service.deletePurchaseItem({
        where: params,
        select: {
          createdAt: true,

          demandListItem: {
            select: {
              id: true,
            },
          },

          id: true,

          product: {
            select: {
              id: true,
            },
          },

          purchase: {
            select: {
              id: true,
            },
          },

          purchasePrice: true,
          quantity: true,

          supplierProduct: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
