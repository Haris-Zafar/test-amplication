/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PurchaseItem as PrismaPurchaseItem,
  DemandListItem as PrismaDemandListItem,
  Product as PrismaProduct,
  Purchase as PrismaPurchase,
  SupplierProduct as PrismaSupplierProduct,
} from "@prisma/client";

export class PurchaseItemServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PurchaseItemCountArgs, "select">
  ): Promise<number> {
    return this.prisma.purchaseItem.count(args);
  }

  async purchaseItems(
    args: Prisma.PurchaseItemFindManyArgs
  ): Promise<PrismaPurchaseItem[]> {
    return this.prisma.purchaseItem.findMany(args);
  }
  async purchaseItem(
    args: Prisma.PurchaseItemFindUniqueArgs
  ): Promise<PrismaPurchaseItem | null> {
    return this.prisma.purchaseItem.findUnique(args);
  }
  async createPurchaseItem(
    args: Prisma.PurchaseItemCreateArgs
  ): Promise<PrismaPurchaseItem> {
    return this.prisma.purchaseItem.create(args);
  }
  async updatePurchaseItem(
    args: Prisma.PurchaseItemUpdateArgs
  ): Promise<PrismaPurchaseItem> {
    return this.prisma.purchaseItem.update(args);
  }
  async deletePurchaseItem(
    args: Prisma.PurchaseItemDeleteArgs
  ): Promise<PrismaPurchaseItem> {
    return this.prisma.purchaseItem.delete(args);
  }

  async getDemandListItem(
    parentId: string
  ): Promise<PrismaDemandListItem | null> {
    return this.prisma.purchaseItem
      .findUnique({
        where: { id: parentId },
      })
      .demandListItem();
  }

  async getProduct(parentId: string): Promise<PrismaProduct | null> {
    return this.prisma.purchaseItem
      .findUnique({
        where: { id: parentId },
      })
      .product();
  }

  async getPurchase(parentId: string): Promise<PrismaPurchase | null> {
    return this.prisma.purchaseItem
      .findUnique({
        where: { id: parentId },
      })
      .purchase();
  }

  async getSupplierProduct(
    parentId: string
  ): Promise<PrismaSupplierProduct | null> {
    return this.prisma.purchaseItem
      .findUnique({
        where: { id: parentId },
      })
      .supplierProduct();
  }
}
