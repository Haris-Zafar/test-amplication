/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PurchaseItem } from "./PurchaseItem";
import { PurchaseItemCountArgs } from "./PurchaseItemCountArgs";
import { PurchaseItemFindManyArgs } from "./PurchaseItemFindManyArgs";
import { PurchaseItemFindUniqueArgs } from "./PurchaseItemFindUniqueArgs";
import { CreatePurchaseItemArgs } from "./CreatePurchaseItemArgs";
import { UpdatePurchaseItemArgs } from "./UpdatePurchaseItemArgs";
import { DeletePurchaseItemArgs } from "./DeletePurchaseItemArgs";
import { DemandListItem } from "../../demandListItem/base/DemandListItem";
import { Product } from "../../product/base/Product";
import { Purchase } from "../../purchase/base/Purchase";
import { SupplierProduct } from "../../supplierProduct/base/SupplierProduct";
import { PurchaseItemService } from "../purchaseItem.service";
@graphql.Resolver(() => PurchaseItem)
export class PurchaseItemResolverBase {
  constructor(protected readonly service: PurchaseItemService) {}

  async _purchaseItemsMeta(
    @graphql.Args() args: PurchaseItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PurchaseItem])
  async purchaseItems(
    @graphql.Args() args: PurchaseItemFindManyArgs
  ): Promise<PurchaseItem[]> {
    return this.service.purchaseItems(args);
  }

  @graphql.Query(() => PurchaseItem, { nullable: true })
  async purchaseItem(
    @graphql.Args() args: PurchaseItemFindUniqueArgs
  ): Promise<PurchaseItem | null> {
    const result = await this.service.purchaseItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PurchaseItem)
  async createPurchaseItem(
    @graphql.Args() args: CreatePurchaseItemArgs
  ): Promise<PurchaseItem> {
    return await this.service.createPurchaseItem({
      ...args,
      data: {
        ...args.data,

        demandListItem: {
          connect: args.data.demandListItem,
        },

        product: {
          connect: args.data.product,
        },

        purchase: {
          connect: args.data.purchase,
        },

        supplierProduct: {
          connect: args.data.supplierProduct,
        },
      },
    });
  }

  @graphql.Mutation(() => PurchaseItem)
  async updatePurchaseItem(
    @graphql.Args() args: UpdatePurchaseItemArgs
  ): Promise<PurchaseItem | null> {
    try {
      return await this.service.updatePurchaseItem({
        ...args,
        data: {
          ...args.data,

          demandListItem: {
            connect: args.data.demandListItem,
          },

          product: {
            connect: args.data.product,
          },

          purchase: {
            connect: args.data.purchase,
          },

          supplierProduct: {
            connect: args.data.supplierProduct,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PurchaseItem)
  async deletePurchaseItem(
    @graphql.Args() args: DeletePurchaseItemArgs
  ): Promise<PurchaseItem | null> {
    try {
      return await this.service.deletePurchaseItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => DemandListItem, {
    nullable: true,
    name: "demandListItem",
  })
  async getDemandListItem(
    @graphql.Parent() parent: PurchaseItem
  ): Promise<DemandListItem | null> {
    const result = await this.service.getDemandListItem(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Product, {
    nullable: true,
    name: "product",
  })
  async getProduct(
    @graphql.Parent() parent: PurchaseItem
  ): Promise<Product | null> {
    const result = await this.service.getProduct(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Purchase, {
    nullable: true,
    name: "purchase",
  })
  async getPurchase(
    @graphql.Parent() parent: PurchaseItem
  ): Promise<Purchase | null> {
    const result = await this.service.getPurchase(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => SupplierProduct, {
    nullable: true,
    name: "supplierProduct",
  })
  async getSupplierProduct(
    @graphql.Parent() parent: PurchaseItem
  ): Promise<SupplierProduct | null> {
    const result = await this.service.getSupplierProduct(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
