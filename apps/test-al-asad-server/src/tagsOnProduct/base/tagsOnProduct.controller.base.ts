/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TagsOnProductService } from "../tagsOnProduct.service";
import { TagsOnProductCreateInput } from "./TagsOnProductCreateInput";
import { TagsOnProduct } from "./TagsOnProduct";
import { TagsOnProductFindManyArgs } from "./TagsOnProductFindManyArgs";
import { TagsOnProductWhereUniqueInput } from "./TagsOnProductWhereUniqueInput";
import { TagsOnProductUpdateInput } from "./TagsOnProductUpdateInput";

export class TagsOnProductControllerBase {
  constructor(protected readonly service: TagsOnProductService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TagsOnProduct })
  async createTagsOnProduct(
    @common.Body() data: TagsOnProductCreateInput
  ): Promise<TagsOnProduct> {
    return await this.service.createTagsOnProduct({
      data: {
        ...data,

        product: {
          connect: data.product,
        },

        tag: {
          connect: data.tag,
        },
      },
      select: {
        id: true,

        product: {
          select: {
            id: true,
          },
        },

        tag: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TagsOnProduct] })
  @ApiNestedQuery(TagsOnProductFindManyArgs)
  async tagsOnProducts(
    @common.Req() request: Request
  ): Promise<TagsOnProduct[]> {
    const args = plainToClass(TagsOnProductFindManyArgs, request.query);
    return this.service.tagsOnProducts({
      ...args,
      select: {
        id: true,

        product: {
          select: {
            id: true,
          },
        },

        tag: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TagsOnProduct })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async tagsOnProduct(
    @common.Param() params: TagsOnProductWhereUniqueInput
  ): Promise<TagsOnProduct | null> {
    const result = await this.service.tagsOnProduct({
      where: params,
      select: {
        id: true,

        product: {
          select: {
            id: true,
          },
        },

        tag: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TagsOnProduct })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTagsOnProduct(
    @common.Param() params: TagsOnProductWhereUniqueInput,
    @common.Body() data: TagsOnProductUpdateInput
  ): Promise<TagsOnProduct | null> {
    try {
      return await this.service.updateTagsOnProduct({
        where: params,
        data: {
          ...data,

          product: {
            connect: data.product,
          },

          tag: {
            connect: data.tag,
          },
        },
        select: {
          id: true,

          product: {
            select: {
              id: true,
            },
          },

          tag: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TagsOnProduct })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTagsOnProduct(
    @common.Param() params: TagsOnProductWhereUniqueInput
  ): Promise<TagsOnProduct | null> {
    try {
      return await this.service.deleteTagsOnProduct({
        where: params,
        select: {
          id: true,

          product: {
            select: {
              id: true,
            },
          },

          tag: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
