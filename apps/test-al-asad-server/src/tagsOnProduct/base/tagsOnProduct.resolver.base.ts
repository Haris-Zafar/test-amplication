/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TagsOnProduct } from "./TagsOnProduct";
import { TagsOnProductCountArgs } from "./TagsOnProductCountArgs";
import { TagsOnProductFindManyArgs } from "./TagsOnProductFindManyArgs";
import { TagsOnProductFindUniqueArgs } from "./TagsOnProductFindUniqueArgs";
import { CreateTagsOnProductArgs } from "./CreateTagsOnProductArgs";
import { UpdateTagsOnProductArgs } from "./UpdateTagsOnProductArgs";
import { DeleteTagsOnProductArgs } from "./DeleteTagsOnProductArgs";
import { Product } from "../../product/base/Product";
import { Tag } from "../../tag/base/Tag";
import { TagsOnProductService } from "../tagsOnProduct.service";
@graphql.Resolver(() => TagsOnProduct)
export class TagsOnProductResolverBase {
  constructor(protected readonly service: TagsOnProductService) {}

  async _tagsOnProductsMeta(
    @graphql.Args() args: TagsOnProductCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TagsOnProduct])
  async tagsOnProducts(
    @graphql.Args() args: TagsOnProductFindManyArgs
  ): Promise<TagsOnProduct[]> {
    return this.service.tagsOnProducts(args);
  }

  @graphql.Query(() => TagsOnProduct, { nullable: true })
  async tagsOnProduct(
    @graphql.Args() args: TagsOnProductFindUniqueArgs
  ): Promise<TagsOnProduct | null> {
    const result = await this.service.tagsOnProduct(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TagsOnProduct)
  async createTagsOnProduct(
    @graphql.Args() args: CreateTagsOnProductArgs
  ): Promise<TagsOnProduct> {
    return await this.service.createTagsOnProduct({
      ...args,
      data: {
        ...args.data,

        product: {
          connect: args.data.product,
        },

        tag: {
          connect: args.data.tag,
        },
      },
    });
  }

  @graphql.Mutation(() => TagsOnProduct)
  async updateTagsOnProduct(
    @graphql.Args() args: UpdateTagsOnProductArgs
  ): Promise<TagsOnProduct | null> {
    try {
      return await this.service.updateTagsOnProduct({
        ...args,
        data: {
          ...args.data,

          product: {
            connect: args.data.product,
          },

          tag: {
            connect: args.data.tag,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TagsOnProduct)
  async deleteTagsOnProduct(
    @graphql.Args() args: DeleteTagsOnProductArgs
  ): Promise<TagsOnProduct | null> {
    try {
      return await this.service.deleteTagsOnProduct(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Product, {
    nullable: true,
    name: "product",
  })
  async getProduct(
    @graphql.Parent() parent: TagsOnProduct
  ): Promise<Product | null> {
    const result = await this.service.getProduct(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tag, {
    nullable: true,
    name: "tag",
  })
  async getTag(@graphql.Parent() parent: TagsOnProduct): Promise<Tag | null> {
    const result = await this.service.getTag(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
