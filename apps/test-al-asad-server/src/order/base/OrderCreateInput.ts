/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";

import {
  IsNumber,
  Max,
  ValidateNested,
  IsDate,
  IsOptional,
  IsString,
  MaxLength,
  IsEnum,
} from "class-validator";

import { CustomerWhereUniqueInput } from "../../customer/base/CustomerWhereUniqueInput";
import { Type } from "class-transformer";
import { OrderItemCreateNestedManyWithoutOrdersInput } from "./OrderItemCreateNestedManyWithoutOrdersInput";
import { CustomerPaymentCreateNestedManyWithoutOrdersInput } from "./CustomerPaymentCreateNestedManyWithoutOrdersInput";
import { EnumOrderStatus } from "./EnumOrderStatus";

@InputType()
class OrderCreateInput {
  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @Field(() => Number)
  advancePayment!: number;

  @ApiProperty({
    required: true,
    type: () => CustomerWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => CustomerWhereUniqueInput)
  @Field(() => CustomerWhereUniqueInput)
  customer!: CustomerWhereUniqueInput;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  dueDate?: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  fulfillmentDate?: Date | null;

  @ApiProperty({
    required: false,
    type: () => OrderItemCreateNestedManyWithoutOrdersInput,
  })
  @ValidateNested()
  @Type(() => OrderItemCreateNestedManyWithoutOrdersInput)
  @IsOptional()
  @Field(() => OrderItemCreateNestedManyWithoutOrdersInput, {
    nullable: true,
  })
  items?: OrderItemCreateNestedManyWithoutOrdersInput;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  orderNumber!: string;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @Field(() => Number)
  paidAmount!: number;

  @ApiProperty({
    required: false,
    type: () => CustomerPaymentCreateNestedManyWithoutOrdersInput,
  })
  @ValidateNested()
  @Type(() => CustomerPaymentCreateNestedManyWithoutOrdersInput)
  @IsOptional()
  @Field(() => CustomerPaymentCreateNestedManyWithoutOrdersInput, {
    nullable: true,
  })
  payments?: CustomerPaymentCreateNestedManyWithoutOrdersInput;

  @ApiProperty({
    required: true,
    enum: EnumOrderStatus,
  })
  @IsEnum(EnumOrderStatus)
  @Field(() => EnumOrderStatus)
  status!: "PENDING" | "PARTIAL" | "COMPLETE" | "CANCELLED";

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @Field(() => Number)
  totalAmount!: number;
}

export { OrderCreateInput as OrderCreateInput };
