/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SupplierProduct as PrismaSupplierProduct,
  PurchaseItem as PrismaPurchaseItem,
  Product as PrismaProduct,
  Supplier as PrismaSupplier,
} from "@prisma/client";

export class SupplierProductServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SupplierProductCountArgs, "select">
  ): Promise<number> {
    return this.prisma.supplierProduct.count(args);
  }

  async supplierProducts(
    args: Prisma.SupplierProductFindManyArgs
  ): Promise<PrismaSupplierProduct[]> {
    return this.prisma.supplierProduct.findMany(args);
  }
  async supplierProduct(
    args: Prisma.SupplierProductFindUniqueArgs
  ): Promise<PrismaSupplierProduct | null> {
    return this.prisma.supplierProduct.findUnique(args);
  }
  async createSupplierProduct(
    args: Prisma.SupplierProductCreateArgs
  ): Promise<PrismaSupplierProduct> {
    return this.prisma.supplierProduct.create(args);
  }
  async updateSupplierProduct(
    args: Prisma.SupplierProductUpdateArgs
  ): Promise<PrismaSupplierProduct> {
    return this.prisma.supplierProduct.update(args);
  }
  async deleteSupplierProduct(
    args: Prisma.SupplierProductDeleteArgs
  ): Promise<PrismaSupplierProduct> {
    return this.prisma.supplierProduct.delete(args);
  }

  async findPurchaseItems(
    parentId: string,
    args: Prisma.PurchaseItemFindManyArgs
  ): Promise<PrismaPurchaseItem[]> {
    return this.prisma.supplierProduct
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .purchaseItems(args);
  }

  async getProduct(parentId: string): Promise<PrismaProduct | null> {
    return this.prisma.supplierProduct
      .findUnique({
        where: { id: parentId },
      })
      .product();
  }

  async getSupplier(parentId: string): Promise<PrismaSupplier | null> {
    return this.prisma.supplierProduct
      .findUnique({
        where: { id: parentId },
      })
      .supplier();
  }
}
