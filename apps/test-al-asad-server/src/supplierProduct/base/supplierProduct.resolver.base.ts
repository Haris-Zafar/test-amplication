/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SupplierProduct } from "./SupplierProduct";
import { SupplierProductCountArgs } from "./SupplierProductCountArgs";
import { SupplierProductFindManyArgs } from "./SupplierProductFindManyArgs";
import { SupplierProductFindUniqueArgs } from "./SupplierProductFindUniqueArgs";
import { CreateSupplierProductArgs } from "./CreateSupplierProductArgs";
import { UpdateSupplierProductArgs } from "./UpdateSupplierProductArgs";
import { DeleteSupplierProductArgs } from "./DeleteSupplierProductArgs";
import { PurchaseItemFindManyArgs } from "../../purchaseItem/base/PurchaseItemFindManyArgs";
import { PurchaseItem } from "../../purchaseItem/base/PurchaseItem";
import { Product } from "../../product/base/Product";
import { Supplier } from "../../supplier/base/Supplier";
import { SupplierProductService } from "../supplierProduct.service";
@graphql.Resolver(() => SupplierProduct)
export class SupplierProductResolverBase {
  constructor(protected readonly service: SupplierProductService) {}

  async _supplierProductsMeta(
    @graphql.Args() args: SupplierProductCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SupplierProduct])
  async supplierProducts(
    @graphql.Args() args: SupplierProductFindManyArgs
  ): Promise<SupplierProduct[]> {
    return this.service.supplierProducts(args);
  }

  @graphql.Query(() => SupplierProduct, { nullable: true })
  async supplierProduct(
    @graphql.Args() args: SupplierProductFindUniqueArgs
  ): Promise<SupplierProduct | null> {
    const result = await this.service.supplierProduct(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SupplierProduct)
  async createSupplierProduct(
    @graphql.Args() args: CreateSupplierProductArgs
  ): Promise<SupplierProduct> {
    return await this.service.createSupplierProduct({
      ...args,
      data: {
        ...args.data,

        product: {
          connect: args.data.product,
        },

        supplier: {
          connect: args.data.supplier,
        },
      },
    });
  }

  @graphql.Mutation(() => SupplierProduct)
  async updateSupplierProduct(
    @graphql.Args() args: UpdateSupplierProductArgs
  ): Promise<SupplierProduct | null> {
    try {
      return await this.service.updateSupplierProduct({
        ...args,
        data: {
          ...args.data,

          product: {
            connect: args.data.product,
          },

          supplier: {
            connect: args.data.supplier,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SupplierProduct)
  async deleteSupplierProduct(
    @graphql.Args() args: DeleteSupplierProductArgs
  ): Promise<SupplierProduct | null> {
    try {
      return await this.service.deleteSupplierProduct(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [PurchaseItem], { name: "purchaseItems" })
  async findPurchaseItems(
    @graphql.Parent() parent: SupplierProduct,
    @graphql.Args() args: PurchaseItemFindManyArgs
  ): Promise<PurchaseItem[]> {
    const results = await this.service.findPurchaseItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Product, {
    nullable: true,
    name: "product",
  })
  async getProduct(
    @graphql.Parent() parent: SupplierProduct
  ): Promise<Product | null> {
    const result = await this.service.getProduct(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Supplier, {
    nullable: true,
    name: "supplier",
  })
  async getSupplier(
    @graphql.Parent() parent: SupplierProduct
  ): Promise<Supplier | null> {
    const result = await this.service.getSupplier(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
