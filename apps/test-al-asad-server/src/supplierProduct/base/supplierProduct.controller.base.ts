/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SupplierProductService } from "../supplierProduct.service";
import { SupplierProductCreateInput } from "./SupplierProductCreateInput";
import { SupplierProduct } from "./SupplierProduct";
import { SupplierProductFindManyArgs } from "./SupplierProductFindManyArgs";
import { SupplierProductWhereUniqueInput } from "./SupplierProductWhereUniqueInput";
import { SupplierProductUpdateInput } from "./SupplierProductUpdateInput";
import { PurchaseItemFindManyArgs } from "../../purchaseItem/base/PurchaseItemFindManyArgs";
import { PurchaseItem } from "../../purchaseItem/base/PurchaseItem";
import { PurchaseItemWhereUniqueInput } from "../../purchaseItem/base/PurchaseItemWhereUniqueInput";

export class SupplierProductControllerBase {
  constructor(protected readonly service: SupplierProductService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SupplierProduct })
  async createSupplierProduct(
    @common.Body() data: SupplierProductCreateInput
  ): Promise<SupplierProduct> {
    return await this.service.createSupplierProduct({
      data: {
        ...data,

        product: {
          connect: data.product,
        },

        supplier: {
          connect: data.supplier,
        },
      },
      select: {
        availability: true,
        createdAt: true,
        id: true,
        lastPurchaseDate: true,

        product: {
          select: {
            id: true,
          },
        },

        purchasePrice: true,

        supplier: {
          select: {
            id: true,
          },
        },

        supplierSku: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SupplierProduct] })
  @ApiNestedQuery(SupplierProductFindManyArgs)
  async supplierProducts(
    @common.Req() request: Request
  ): Promise<SupplierProduct[]> {
    const args = plainToClass(SupplierProductFindManyArgs, request.query);
    return this.service.supplierProducts({
      ...args,
      select: {
        availability: true,
        createdAt: true,
        id: true,
        lastPurchaseDate: true,

        product: {
          select: {
            id: true,
          },
        },

        purchasePrice: true,

        supplier: {
          select: {
            id: true,
          },
        },

        supplierSku: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SupplierProduct })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async supplierProduct(
    @common.Param() params: SupplierProductWhereUniqueInput
  ): Promise<SupplierProduct | null> {
    const result = await this.service.supplierProduct({
      where: params,
      select: {
        availability: true,
        createdAt: true,
        id: true,
        lastPurchaseDate: true,

        product: {
          select: {
            id: true,
          },
        },

        purchasePrice: true,

        supplier: {
          select: {
            id: true,
          },
        },

        supplierSku: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SupplierProduct })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSupplierProduct(
    @common.Param() params: SupplierProductWhereUniqueInput,
    @common.Body() data: SupplierProductUpdateInput
  ): Promise<SupplierProduct | null> {
    try {
      return await this.service.updateSupplierProduct({
        where: params,
        data: {
          ...data,

          product: {
            connect: data.product,
          },

          supplier: {
            connect: data.supplier,
          },
        },
        select: {
          availability: true,
          createdAt: true,
          id: true,
          lastPurchaseDate: true,

          product: {
            select: {
              id: true,
            },
          },

          purchasePrice: true,

          supplier: {
            select: {
              id: true,
            },
          },

          supplierSku: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SupplierProduct })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSupplierProduct(
    @common.Param() params: SupplierProductWhereUniqueInput
  ): Promise<SupplierProduct | null> {
    try {
      return await this.service.deleteSupplierProduct({
        where: params,
        select: {
          availability: true,
          createdAt: true,
          id: true,
          lastPurchaseDate: true,

          product: {
            select: {
              id: true,
            },
          },

          purchasePrice: true,

          supplier: {
            select: {
              id: true,
            },
          },

          supplierSku: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/purchaseItems")
  @ApiNestedQuery(PurchaseItemFindManyArgs)
  async findPurchaseItems(
    @common.Req() request: Request,
    @common.Param() params: SupplierProductWhereUniqueInput
  ): Promise<PurchaseItem[]> {
    const query = plainToClass(PurchaseItemFindManyArgs, request.query);
    const results = await this.service.findPurchaseItems(params.id, {
      ...query,
      select: {
        createdAt: true,

        demandListItem: {
          select: {
            id: true,
          },
        },

        id: true,

        product: {
          select: {
            id: true,
          },
        },

        purchase: {
          select: {
            id: true,
          },
        },

        purchasePrice: true,
        quantity: true,

        supplierProduct: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/purchaseItems")
  async connectPurchaseItems(
    @common.Param() params: SupplierProductWhereUniqueInput,
    @common.Body() body: PurchaseItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchaseItems: {
        connect: body,
      },
    };
    await this.service.updateSupplierProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/purchaseItems")
  async updatePurchaseItems(
    @common.Param() params: SupplierProductWhereUniqueInput,
    @common.Body() body: PurchaseItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchaseItems: {
        set: body,
      },
    };
    await this.service.updateSupplierProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/purchaseItems")
  async disconnectPurchaseItems(
    @common.Param() params: SupplierProductWhereUniqueInput,
    @common.Body() body: PurchaseItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchaseItems: {
        disconnect: body,
      },
    };
    await this.service.updateSupplierProduct({
      where: params,
      data,
      select: { id: true },
    });
  }
}
