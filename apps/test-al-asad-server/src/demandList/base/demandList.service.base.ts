/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DemandList as PrismaDemandList,
  DemandListItem as PrismaDemandListItem,
  Purchase as PrismaPurchase,
  Supplier as PrismaSupplier,
} from "@prisma/client";

export class DemandListServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DemandListCountArgs, "select">
  ): Promise<number> {
    return this.prisma.demandList.count(args);
  }

  async demandLists(
    args: Prisma.DemandListFindManyArgs
  ): Promise<PrismaDemandList[]> {
    return this.prisma.demandList.findMany(args);
  }
  async demandList(
    args: Prisma.DemandListFindUniqueArgs
  ): Promise<PrismaDemandList | null> {
    return this.prisma.demandList.findUnique(args);
  }
  async createDemandList(
    args: Prisma.DemandListCreateArgs
  ): Promise<PrismaDemandList> {
    return this.prisma.demandList.create(args);
  }
  async updateDemandList(
    args: Prisma.DemandListUpdateArgs
  ): Promise<PrismaDemandList> {
    return this.prisma.demandList.update(args);
  }
  async deleteDemandList(
    args: Prisma.DemandListDeleteArgs
  ): Promise<PrismaDemandList> {
    return this.prisma.demandList.delete(args);
  }

  async findItems(
    parentId: string,
    args: Prisma.DemandListItemFindManyArgs
  ): Promise<PrismaDemandListItem[]> {
    return this.prisma.demandList
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .items(args);
  }

  async getPurchase(parentId: string): Promise<PrismaPurchase | null> {
    return this.prisma.demandList
      .findUnique({
        where: { id: parentId },
      })
      .purchase();
  }

  async getSupplier(parentId: string): Promise<PrismaSupplier | null> {
    return this.prisma.demandList
      .findUnique({
        where: { id: parentId },
      })
      .supplier();
  }
}
