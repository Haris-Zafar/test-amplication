/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DemandListService } from "../demandList.service";
import { DemandListCreateInput } from "./DemandListCreateInput";
import { DemandList } from "./DemandList";
import { DemandListFindManyArgs } from "./DemandListFindManyArgs";
import { DemandListWhereUniqueInput } from "./DemandListWhereUniqueInput";
import { DemandListUpdateInput } from "./DemandListUpdateInput";
import { DemandListItemFindManyArgs } from "../../demandListItem/base/DemandListItemFindManyArgs";
import { DemandListItem } from "../../demandListItem/base/DemandListItem";
import { DemandListItemWhereUniqueInput } from "../../demandListItem/base/DemandListItemWhereUniqueInput";

export class DemandListControllerBase {
  constructor(protected readonly service: DemandListService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DemandList })
  async createDemandList(
    @common.Body() data: DemandListCreateInput
  ): Promise<DemandList> {
    return await this.service.createDemandList({
      data: {
        ...data,

        purchase: data.purchase
          ? {
              connect: data.purchase,
            }
          : undefined,

        supplier: {
          connect: data.supplier,
        },
      },
      select: {
        createdAt: true,
        demandDate: true,
        estimatedCost: true,
        id: true,

        purchase: {
          select: {
            id: true,
          },
        },

        status: true,

        supplier: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DemandList] })
  @ApiNestedQuery(DemandListFindManyArgs)
  async demandLists(@common.Req() request: Request): Promise<DemandList[]> {
    const args = plainToClass(DemandListFindManyArgs, request.query);
    return this.service.demandLists({
      ...args,
      select: {
        createdAt: true,
        demandDate: true,
        estimatedCost: true,
        id: true,

        purchase: {
          select: {
            id: true,
          },
        },

        status: true,

        supplier: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DemandList })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async demandList(
    @common.Param() params: DemandListWhereUniqueInput
  ): Promise<DemandList | null> {
    const result = await this.service.demandList({
      where: params,
      select: {
        createdAt: true,
        demandDate: true,
        estimatedCost: true,
        id: true,

        purchase: {
          select: {
            id: true,
          },
        },

        status: true,

        supplier: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DemandList })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDemandList(
    @common.Param() params: DemandListWhereUniqueInput,
    @common.Body() data: DemandListUpdateInput
  ): Promise<DemandList | null> {
    try {
      return await this.service.updateDemandList({
        where: params,
        data: {
          ...data,

          purchase: data.purchase
            ? {
                connect: data.purchase,
              }
            : undefined,

          supplier: {
            connect: data.supplier,
          },
        },
        select: {
          createdAt: true,
          demandDate: true,
          estimatedCost: true,
          id: true,

          purchase: {
            select: {
              id: true,
            },
          },

          status: true,

          supplier: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DemandList })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDemandList(
    @common.Param() params: DemandListWhereUniqueInput
  ): Promise<DemandList | null> {
    try {
      return await this.service.deleteDemandList({
        where: params,
        select: {
          createdAt: true,
          demandDate: true,
          estimatedCost: true,
          id: true,

          purchase: {
            select: {
              id: true,
            },
          },

          status: true,

          supplier: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/items")
  @ApiNestedQuery(DemandListItemFindManyArgs)
  async findItems(
    @common.Req() request: Request,
    @common.Param() params: DemandListWhereUniqueInput
  ): Promise<DemandListItem[]> {
    const query = plainToClass(DemandListItemFindManyArgs, request.query);
    const results = await this.service.findItems(params.id, {
      ...query,
      select: {
        confirmedQuantity: true,
        createdAt: true,

        demandList: {
          select: {
            id: true,
          },
        },

        id: true,

        orderItem: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },

        purchaseItem: {
          select: {
            id: true,
          },
        },

        requestedQuantity: true,
        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/items")
  async connectItems(
    @common.Param() params: DemandListWhereUniqueInput,
    @common.Body() body: DemandListItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      items: {
        connect: body,
      },
    };
    await this.service.updateDemandList({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/items")
  async updateItems(
    @common.Param() params: DemandListWhereUniqueInput,
    @common.Body() body: DemandListItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      items: {
        set: body,
      },
    };
    await this.service.updateDemandList({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/items")
  async disconnectItems(
    @common.Param() params: DemandListWhereUniqueInput,
    @common.Body() body: DemandListItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      items: {
        disconnect: body,
      },
    };
    await this.service.updateDemandList({
      where: params,
      data,
      select: { id: true },
    });
  }
}
