/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { CategoryWhereUniqueInput } from "../../category/base/CategoryWhereUniqueInput";

import {
  ValidateNested,
  IsOptional,
  IsString,
  MaxLength,
  IsDate,
  IsNumber,
  Max,
  IsInt,
  IsEnum,
} from "class-validator";

import { Type } from "class-transformer";
import { CompanyWhereUniqueInput } from "../../company/base/CompanyWhereUniqueInput";
import { CustomerProductPriceCreateNestedManyWithoutProductsInput } from "./CustomerProductPriceCreateNestedManyWithoutProductsInput";
import { DemandListItemCreateNestedManyWithoutProductsInput } from "./DemandListItemCreateNestedManyWithoutProductsInput";
import { OrderItemCreateNestedManyWithoutProductsInput } from "./OrderItemCreateNestedManyWithoutProductsInput";
import { PurchaseItemCreateNestedManyWithoutProductsInput } from "./PurchaseItemCreateNestedManyWithoutProductsInput";
import { SupplierProductCreateNestedManyWithoutProductsInput } from "./SupplierProductCreateNestedManyWithoutProductsInput";
import { TagsOnProductCreateNestedManyWithoutProductsInput } from "./TagsOnProductCreateNestedManyWithoutProductsInput";
import { EnumProductWeightUnit } from "./EnumProductWeightUnit";

@InputType()
class ProductCreateInput {
  @ApiProperty({
    required: true,
    type: () => CategoryWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => CategoryWhereUniqueInput)
  @Field(() => CategoryWhereUniqueInput)
  category!: CategoryWhereUniqueInput;

  @ApiProperty({
    required: true,
    type: () => CompanyWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => CompanyWhereUniqueInput)
  @Field(() => CompanyWhereUniqueInput)
  company!: CompanyWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => CustomerProductPriceCreateNestedManyWithoutProductsInput,
  })
  @ValidateNested()
  @Type(() => CustomerProductPriceCreateNestedManyWithoutProductsInput)
  @IsOptional()
  @Field(() => CustomerProductPriceCreateNestedManyWithoutProductsInput, {
    nullable: true,
  })
  customerPrices?: CustomerProductPriceCreateNestedManyWithoutProductsInput;

  @ApiProperty({
    required: false,
    type: () => DemandListItemCreateNestedManyWithoutProductsInput,
  })
  @ValidateNested()
  @Type(() => DemandListItemCreateNestedManyWithoutProductsInput)
  @IsOptional()
  @Field(() => DemandListItemCreateNestedManyWithoutProductsInput, {
    nullable: true,
  })
  demandListItem?: DemandListItemCreateNestedManyWithoutProductsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  description?: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  expiryDate?: Date | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  name!: string;

  @ApiProperty({
    required: false,
    type: () => OrderItemCreateNestedManyWithoutProductsInput,
  })
  @ValidateNested()
  @Type(() => OrderItemCreateNestedManyWithoutProductsInput)
  @IsOptional()
  @Field(() => OrderItemCreateNestedManyWithoutProductsInput, {
    nullable: true,
  })
  orderItems?: OrderItemCreateNestedManyWithoutProductsInput;

  @ApiProperty({
    required: false,
    type: () => PurchaseItemCreateNestedManyWithoutProductsInput,
  })
  @ValidateNested()
  @Type(() => PurchaseItemCreateNestedManyWithoutProductsInput)
  @IsOptional()
  @Field(() => PurchaseItemCreateNestedManyWithoutProductsInput, {
    nullable: true,
  })
  purchaseItem?: PurchaseItemCreateNestedManyWithoutProductsInput;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @Field(() => Number)
  purchasePrice!: number;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  reorderLevel?: number | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  retailPrice?: number | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @Field(() => Number)
  sellPrice!: number;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  size?: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  sku!: string;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Max(99999999999)
  @Field(() => Number)
  stockQuantity!: number;

  @ApiProperty({
    required: false,
    type: () => SupplierProductCreateNestedManyWithoutProductsInput,
  })
  @ValidateNested()
  @Type(() => SupplierProductCreateNestedManyWithoutProductsInput)
  @IsOptional()
  @Field(() => SupplierProductCreateNestedManyWithoutProductsInput, {
    nullable: true,
  })
  supplierProducts?: SupplierProductCreateNestedManyWithoutProductsInput;

  @ApiProperty({
    required: false,
    type: () => TagsOnProductCreateNestedManyWithoutProductsInput,
  })
  @ValidateNested()
  @Type(() => TagsOnProductCreateNestedManyWithoutProductsInput)
  @IsOptional()
  @Field(() => TagsOnProductCreateNestedManyWithoutProductsInput, {
    nullable: true,
  })
  tags?: TagsOnProductCreateNestedManyWithoutProductsInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  weight?: number | null;

  @ApiProperty({
    required: false,
    enum: EnumProductWeightUnit,
  })
  @IsEnum(EnumProductWeightUnit)
  @IsOptional()
  @Field(() => EnumProductWeightUnit, {
    nullable: true,
  })
  weightUnit?: "G" | "ML" | "KG" | "L" | null;
}

export { ProductCreateInput as ProductCreateInput };
