/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProductService } from "../product.service";
import { ProductCreateInput } from "./ProductCreateInput";
import { Product } from "./Product";
import { ProductFindManyArgs } from "./ProductFindManyArgs";
import { ProductWhereUniqueInput } from "./ProductWhereUniqueInput";
import { ProductUpdateInput } from "./ProductUpdateInput";
import { CustomerProductPriceFindManyArgs } from "../../customerProductPrice/base/CustomerProductPriceFindManyArgs";
import { CustomerProductPrice } from "../../customerProductPrice/base/CustomerProductPrice";
import { CustomerProductPriceWhereUniqueInput } from "../../customerProductPrice/base/CustomerProductPriceWhereUniqueInput";
import { DemandListItemFindManyArgs } from "../../demandListItem/base/DemandListItemFindManyArgs";
import { DemandListItem } from "../../demandListItem/base/DemandListItem";
import { DemandListItemWhereUniqueInput } from "../../demandListItem/base/DemandListItemWhereUniqueInput";
import { OrderItemFindManyArgs } from "../../orderItem/base/OrderItemFindManyArgs";
import { OrderItem } from "../../orderItem/base/OrderItem";
import { OrderItemWhereUniqueInput } from "../../orderItem/base/OrderItemWhereUniqueInput";
import { PurchaseItemFindManyArgs } from "../../purchaseItem/base/PurchaseItemFindManyArgs";
import { PurchaseItem } from "../../purchaseItem/base/PurchaseItem";
import { PurchaseItemWhereUniqueInput } from "../../purchaseItem/base/PurchaseItemWhereUniqueInput";
import { SupplierProductFindManyArgs } from "../../supplierProduct/base/SupplierProductFindManyArgs";
import { SupplierProduct } from "../../supplierProduct/base/SupplierProduct";
import { SupplierProductWhereUniqueInput } from "../../supplierProduct/base/SupplierProductWhereUniqueInput";
import { TagsOnProductFindManyArgs } from "../../tagsOnProduct/base/TagsOnProductFindManyArgs";
import { TagsOnProduct } from "../../tagsOnProduct/base/TagsOnProduct";
import { TagsOnProductWhereUniqueInput } from "../../tagsOnProduct/base/TagsOnProductWhereUniqueInput";

export class ProductControllerBase {
  constructor(protected readonly service: ProductService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Product })
  async createProduct(
    @common.Body() data: ProductCreateInput
  ): Promise<Product> {
    return await this.service.createProduct({
      data: {
        ...data,

        category: {
          connect: data.category,
        },

        company: {
          connect: data.company,
        },
      },
      select: {
        category: {
          select: {
            id: true,
          },
        },

        company: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        expiryDate: true,
        id: true,
        name: true,
        purchasePrice: true,
        reorderLevel: true,
        retailPrice: true,
        sellPrice: true,
        size: true,
        sku: true,
        stockQuantity: true,
        updatedAt: true,
        weight: true,
        weightUnit: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Product] })
  @ApiNestedQuery(ProductFindManyArgs)
  async products(@common.Req() request: Request): Promise<Product[]> {
    const args = plainToClass(ProductFindManyArgs, request.query);
    return this.service.products({
      ...args,
      select: {
        category: {
          select: {
            id: true,
          },
        },

        company: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        expiryDate: true,
        id: true,
        name: true,
        purchasePrice: true,
        reorderLevel: true,
        retailPrice: true,
        sellPrice: true,
        size: true,
        sku: true,
        stockQuantity: true,
        updatedAt: true,
        weight: true,
        weightUnit: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Product })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async product(
    @common.Param() params: ProductWhereUniqueInput
  ): Promise<Product | null> {
    const result = await this.service.product({
      where: params,
      select: {
        category: {
          select: {
            id: true,
          },
        },

        company: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        expiryDate: true,
        id: true,
        name: true,
        purchasePrice: true,
        reorderLevel: true,
        retailPrice: true,
        sellPrice: true,
        size: true,
        sku: true,
        stockQuantity: true,
        updatedAt: true,
        weight: true,
        weightUnit: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Product })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProduct(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() data: ProductUpdateInput
  ): Promise<Product | null> {
    try {
      return await this.service.updateProduct({
        where: params,
        data: {
          ...data,

          category: {
            connect: data.category,
          },

          company: {
            connect: data.company,
          },
        },
        select: {
          category: {
            select: {
              id: true,
            },
          },

          company: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          description: true,
          expiryDate: true,
          id: true,
          name: true,
          purchasePrice: true,
          reorderLevel: true,
          retailPrice: true,
          sellPrice: true,
          size: true,
          sku: true,
          stockQuantity: true,
          updatedAt: true,
          weight: true,
          weightUnit: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Product })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProduct(
    @common.Param() params: ProductWhereUniqueInput
  ): Promise<Product | null> {
    try {
      return await this.service.deleteProduct({
        where: params,
        select: {
          category: {
            select: {
              id: true,
            },
          },

          company: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          description: true,
          expiryDate: true,
          id: true,
          name: true,
          purchasePrice: true,
          reorderLevel: true,
          retailPrice: true,
          sellPrice: true,
          size: true,
          sku: true,
          stockQuantity: true,
          updatedAt: true,
          weight: true,
          weightUnit: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/customerPrices")
  @ApiNestedQuery(CustomerProductPriceFindManyArgs)
  async findCustomerPrices(
    @common.Req() request: Request,
    @common.Param() params: ProductWhereUniqueInput
  ): Promise<CustomerProductPrice[]> {
    const query = plainToClass(CustomerProductPriceFindManyArgs, request.query);
    const results = await this.service.findCustomerPrices(params.id, {
      ...query,
      select: {
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        id: true,

        product: {
          select: {
            id: true,
          },
        },

        specialPrice: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/customerPrices")
  async connectCustomerPrices(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: CustomerProductPriceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customerPrices: {
        connect: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/customerPrices")
  async updateCustomerPrices(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: CustomerProductPriceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customerPrices: {
        set: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/customerPrices")
  async disconnectCustomerPrices(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: CustomerProductPriceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customerPrices: {
        disconnect: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/demandListItem")
  @ApiNestedQuery(DemandListItemFindManyArgs)
  async findDemandListItem(
    @common.Req() request: Request,
    @common.Param() params: ProductWhereUniqueInput
  ): Promise<DemandListItem[]> {
    const query = plainToClass(DemandListItemFindManyArgs, request.query);
    const results = await this.service.findDemandListItem(params.id, {
      ...query,
      select: {
        confirmedQuantity: true,
        createdAt: true,

        demandList: {
          select: {
            id: true,
          },
        },

        id: true,

        orderItem: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },

        purchaseItem: {
          select: {
            id: true,
          },
        },

        requestedQuantity: true,
        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/demandListItem")
  async connectDemandListItem(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: DemandListItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      demandListItem: {
        connect: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/demandListItem")
  async updateDemandListItem(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: DemandListItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      demandListItem: {
        set: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/demandListItem")
  async disconnectDemandListItem(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: DemandListItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      demandListItem: {
        disconnect: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/orderItems")
  @ApiNestedQuery(OrderItemFindManyArgs)
  async findOrderItems(
    @common.Req() request: Request,
    @common.Param() params: ProductWhereUniqueInput
  ): Promise<OrderItem[]> {
    const query = plainToClass(OrderItemFindManyArgs, request.query);
    const results = await this.service.findOrderItems(params.id, {
      ...query,
      select: {
        createdAt: true,
        fulfilledQuantity: true,
        id: true,

        order: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },

        quantity: true,
        sellPrice: true,
        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/orderItems")
  async connectOrderItems(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: OrderItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderItems: {
        connect: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/orderItems")
  async updateOrderItems(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: OrderItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderItems: {
        set: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/orderItems")
  async disconnectOrderItems(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: OrderItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderItems: {
        disconnect: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/purchaseItem")
  @ApiNestedQuery(PurchaseItemFindManyArgs)
  async findPurchaseItem(
    @common.Req() request: Request,
    @common.Param() params: ProductWhereUniqueInput
  ): Promise<PurchaseItem[]> {
    const query = plainToClass(PurchaseItemFindManyArgs, request.query);
    const results = await this.service.findPurchaseItem(params.id, {
      ...query,
      select: {
        createdAt: true,

        demandListItem: {
          select: {
            id: true,
          },
        },

        id: true,

        product: {
          select: {
            id: true,
          },
        },

        purchase: {
          select: {
            id: true,
          },
        },

        purchasePrice: true,
        quantity: true,

        supplierProduct: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/purchaseItem")
  async connectPurchaseItem(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: PurchaseItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchaseItem: {
        connect: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/purchaseItem")
  async updatePurchaseItem(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: PurchaseItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchaseItem: {
        set: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/purchaseItem")
  async disconnectPurchaseItem(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: PurchaseItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchaseItem: {
        disconnect: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/supplierProducts")
  @ApiNestedQuery(SupplierProductFindManyArgs)
  async findSupplierProducts(
    @common.Req() request: Request,
    @common.Param() params: ProductWhereUniqueInput
  ): Promise<SupplierProduct[]> {
    const query = plainToClass(SupplierProductFindManyArgs, request.query);
    const results = await this.service.findSupplierProducts(params.id, {
      ...query,
      select: {
        availability: true,
        createdAt: true,
        id: true,
        lastPurchaseDate: true,

        product: {
          select: {
            id: true,
          },
        },

        purchasePrice: true,

        supplier: {
          select: {
            id: true,
          },
        },

        supplierSku: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/supplierProducts")
  async connectSupplierProducts(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: SupplierProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      supplierProducts: {
        connect: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/supplierProducts")
  async updateSupplierProducts(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: SupplierProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      supplierProducts: {
        set: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/supplierProducts")
  async disconnectSupplierProducts(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: SupplierProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      supplierProducts: {
        disconnect: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/tags")
  @ApiNestedQuery(TagsOnProductFindManyArgs)
  async findTags(
    @common.Req() request: Request,
    @common.Param() params: ProductWhereUniqueInput
  ): Promise<TagsOnProduct[]> {
    const query = plainToClass(TagsOnProductFindManyArgs, request.query);
    const results = await this.service.findTags(params.id, {
      ...query,
      select: {
        id: true,

        product: {
          select: {
            id: true,
          },
        },

        tag: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tags")
  async connectTags(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: TagsOnProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tags: {
        connect: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tags")
  async updateTags(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: TagsOnProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tags: {
        set: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tags")
  async disconnectTags(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: TagsOnProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tags: {
        disconnect: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }
}
