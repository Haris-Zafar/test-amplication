/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { Category } from "../../category/base/Category";

import {
  ValidateNested,
  IsDate,
  IsOptional,
  IsString,
  MaxLength,
  IsNumber,
  Max,
  IsInt,
  IsEnum,
} from "class-validator";

import { Type } from "class-transformer";
import { Company } from "../../company/base/Company";
import { CustomerProductPrice } from "../../customerProductPrice/base/CustomerProductPrice";
import { DemandListItem } from "../../demandListItem/base/DemandListItem";
import { OrderItem } from "../../orderItem/base/OrderItem";
import { PurchaseItem } from "../../purchaseItem/base/PurchaseItem";
import { SupplierProduct } from "../../supplierProduct/base/SupplierProduct";
import { TagsOnProduct } from "../../tagsOnProduct/base/TagsOnProduct";
import { EnumProductWeightUnit } from "./EnumProductWeightUnit";

@ObjectType()
class Product {
  @ApiProperty({
    required: true,
    type: () => Category,
  })
  @ValidateNested()
  @Type(() => Category)
  category?: Category;

  @ApiProperty({
    required: true,
    type: () => Company,
  })
  @ValidateNested()
  @Type(() => Company)
  company?: Company;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: () => [CustomerProductPrice],
  })
  @ValidateNested()
  @Type(() => CustomerProductPrice)
  @IsOptional()
  customerPrices?: Array<CustomerProductPrice>;

  @ApiProperty({
    required: false,
    type: () => [DemandListItem],
  })
  @ValidateNested()
  @Type(() => DemandListItem)
  @IsOptional()
  demandListItem?: Array<DemandListItem>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  description!: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  expiryDate!: Date | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  name!: string;

  @ApiProperty({
    required: false,
    type: () => [OrderItem],
  })
  @ValidateNested()
  @Type(() => OrderItem)
  @IsOptional()
  orderItems?: Array<OrderItem>;

  @ApiProperty({
    required: false,
    type: () => [PurchaseItem],
  })
  @ValidateNested()
  @Type(() => PurchaseItem)
  @IsOptional()
  purchaseItem?: Array<PurchaseItem>;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @Field(() => Number)
  purchasePrice!: number;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  reorderLevel!: number | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  retailPrice!: number | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @Field(() => Number)
  sellPrice!: number;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  size!: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  sku!: string;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Max(99999999999)
  @Field(() => Number)
  stockQuantity!: number;

  @ApiProperty({
    required: false,
    type: () => [SupplierProduct],
  })
  @ValidateNested()
  @Type(() => SupplierProduct)
  @IsOptional()
  supplierProducts?: Array<SupplierProduct>;

  @ApiProperty({
    required: false,
    type: () => [TagsOnProduct],
  })
  @ValidateNested()
  @Type(() => TagsOnProduct)
  @IsOptional()
  tags?: Array<TagsOnProduct>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  weight!: number | null;

  @ApiProperty({
    required: false,
    enum: EnumProductWeightUnit,
  })
  @IsEnum(EnumProductWeightUnit)
  @IsOptional()
  @Field(() => EnumProductWeightUnit, {
    nullable: true,
  })
  weightUnit?: "G" | "ML" | "KG" | "L" | null;
}

export { Product as Product };
