/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Product as PrismaProduct,
  CustomerProductPrice as PrismaCustomerProductPrice,
  DemandListItem as PrismaDemandListItem,
  OrderItem as PrismaOrderItem,
  PurchaseItem as PrismaPurchaseItem,
  SupplierProduct as PrismaSupplierProduct,
  TagsOnProduct as PrismaTagsOnProduct,
  Category as PrismaCategory,
  Company as PrismaCompany,
} from "@prisma/client";

export class ProductServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ProductCountArgs, "select">): Promise<number> {
    return this.prisma.product.count(args);
  }

  async products(args: Prisma.ProductFindManyArgs): Promise<PrismaProduct[]> {
    return this.prisma.product.findMany(args);
  }
  async product(
    args: Prisma.ProductFindUniqueArgs
  ): Promise<PrismaProduct | null> {
    return this.prisma.product.findUnique(args);
  }
  async createProduct(args: Prisma.ProductCreateArgs): Promise<PrismaProduct> {
    return this.prisma.product.create(args);
  }
  async updateProduct(args: Prisma.ProductUpdateArgs): Promise<PrismaProduct> {
    return this.prisma.product.update(args);
  }
  async deleteProduct(args: Prisma.ProductDeleteArgs): Promise<PrismaProduct> {
    return this.prisma.product.delete(args);
  }

  async findCustomerPrices(
    parentId: string,
    args: Prisma.CustomerProductPriceFindManyArgs
  ): Promise<PrismaCustomerProductPrice[]> {
    return this.prisma.product
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .customerPrices(args);
  }

  async findDemandListItem(
    parentId: string,
    args: Prisma.DemandListItemFindManyArgs
  ): Promise<PrismaDemandListItem[]> {
    return this.prisma.product
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .demandListItem(args);
  }

  async findOrderItems(
    parentId: string,
    args: Prisma.OrderItemFindManyArgs
  ): Promise<PrismaOrderItem[]> {
    return this.prisma.product
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .orderItems(args);
  }

  async findPurchaseItem(
    parentId: string,
    args: Prisma.PurchaseItemFindManyArgs
  ): Promise<PrismaPurchaseItem[]> {
    return this.prisma.product
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .purchaseItem(args);
  }

  async findSupplierProducts(
    parentId: string,
    args: Prisma.SupplierProductFindManyArgs
  ): Promise<PrismaSupplierProduct[]> {
    return this.prisma.product
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .supplierProducts(args);
  }

  async findTags(
    parentId: string,
    args: Prisma.TagsOnProductFindManyArgs
  ): Promise<PrismaTagsOnProduct[]> {
    return this.prisma.product
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tags(args);
  }

  async getCategory(parentId: string): Promise<PrismaCategory | null> {
    return this.prisma.product
      .findUnique({
        where: { id: parentId },
      })
      .category();
  }

  async getCompany(parentId: string): Promise<PrismaCompany | null> {
    return this.prisma.product
      .findUnique({
        where: { id: parentId },
      })
      .company();
  }
}
