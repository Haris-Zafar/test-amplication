/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Purchase } from "./Purchase";
import { PurchaseCountArgs } from "./PurchaseCountArgs";
import { PurchaseFindManyArgs } from "./PurchaseFindManyArgs";
import { PurchaseFindUniqueArgs } from "./PurchaseFindUniqueArgs";
import { CreatePurchaseArgs } from "./CreatePurchaseArgs";
import { UpdatePurchaseArgs } from "./UpdatePurchaseArgs";
import { DeletePurchaseArgs } from "./DeletePurchaseArgs";
import { PurchaseItemFindManyArgs } from "../../purchaseItem/base/PurchaseItemFindManyArgs";
import { PurchaseItem } from "../../purchaseItem/base/PurchaseItem";
import { SupplierPaymentFindManyArgs } from "../../supplierPayment/base/SupplierPaymentFindManyArgs";
import { SupplierPayment } from "../../supplierPayment/base/SupplierPayment";
import { DemandList } from "../../demandList/base/DemandList";
import { Supplier } from "../../supplier/base/Supplier";
import { PurchaseService } from "../purchase.service";
@graphql.Resolver(() => Purchase)
export class PurchaseResolverBase {
  constructor(protected readonly service: PurchaseService) {}

  async _purchasesMeta(
    @graphql.Args() args: PurchaseCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Purchase])
  async purchases(
    @graphql.Args() args: PurchaseFindManyArgs
  ): Promise<Purchase[]> {
    return this.service.purchases(args);
  }

  @graphql.Query(() => Purchase, { nullable: true })
  async purchase(
    @graphql.Args() args: PurchaseFindUniqueArgs
  ): Promise<Purchase | null> {
    const result = await this.service.purchase(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Purchase)
  async createPurchase(
    @graphql.Args() args: CreatePurchaseArgs
  ): Promise<Purchase> {
    return await this.service.createPurchase({
      ...args,
      data: {
        ...args.data,

        demandList: {
          connect: args.data.demandList,
        },

        supplier: {
          connect: args.data.supplier,
        },
      },
    });
  }

  @graphql.Mutation(() => Purchase)
  async updatePurchase(
    @graphql.Args() args: UpdatePurchaseArgs
  ): Promise<Purchase | null> {
    try {
      return await this.service.updatePurchase({
        ...args,
        data: {
          ...args.data,

          demandList: {
            connect: args.data.demandList,
          },

          supplier: {
            connect: args.data.supplier,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Purchase)
  async deletePurchase(
    @graphql.Args() args: DeletePurchaseArgs
  ): Promise<Purchase | null> {
    try {
      return await this.service.deletePurchase(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [PurchaseItem], { name: "items" })
  async findItems(
    @graphql.Parent() parent: Purchase,
    @graphql.Args() args: PurchaseItemFindManyArgs
  ): Promise<PurchaseItem[]> {
    const results = await this.service.findItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [SupplierPayment], { name: "payments" })
  async findPayments(
    @graphql.Parent() parent: Purchase,
    @graphql.Args() args: SupplierPaymentFindManyArgs
  ): Promise<SupplierPayment[]> {
    const results = await this.service.findPayments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => DemandList, {
    nullable: true,
    name: "demandList",
  })
  async getDemandList(
    @graphql.Parent() parent: Purchase
  ): Promise<DemandList | null> {
    const result = await this.service.getDemandList(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Supplier, {
    nullable: true,
    name: "supplier",
  })
  async getSupplier(
    @graphql.Parent() parent: Purchase
  ): Promise<Supplier | null> {
    const result = await this.service.getSupplier(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
