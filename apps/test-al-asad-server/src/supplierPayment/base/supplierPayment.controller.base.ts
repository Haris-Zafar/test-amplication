/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SupplierPaymentService } from "../supplierPayment.service";
import { SupplierPaymentCreateInput } from "./SupplierPaymentCreateInput";
import { SupplierPayment } from "./SupplierPayment";
import { SupplierPaymentFindManyArgs } from "./SupplierPaymentFindManyArgs";
import { SupplierPaymentWhereUniqueInput } from "./SupplierPaymentWhereUniqueInput";
import { SupplierPaymentUpdateInput } from "./SupplierPaymentUpdateInput";

export class SupplierPaymentControllerBase {
  constructor(protected readonly service: SupplierPaymentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SupplierPayment })
  async createSupplierPayment(
    @common.Body() data: SupplierPaymentCreateInput
  ): Promise<SupplierPayment> {
    return await this.service.createSupplierPayment({
      data: {
        ...data,

        purchase: data.purchase
          ? {
              connect: data.purchase,
            }
          : undefined,

        supplier: {
          connect: data.supplier,
        },
      },
      select: {
        amount: true,
        createdAt: true,
        id: true,
        notes: true,
        paymentDate: true,
        paymentMethod: true,

        purchase: {
          select: {
            id: true,
          },
        },

        reference: true,

        supplier: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SupplierPayment] })
  @ApiNestedQuery(SupplierPaymentFindManyArgs)
  async supplierPayments(
    @common.Req() request: Request
  ): Promise<SupplierPayment[]> {
    const args = plainToClass(SupplierPaymentFindManyArgs, request.query);
    return this.service.supplierPayments({
      ...args,
      select: {
        amount: true,
        createdAt: true,
        id: true,
        notes: true,
        paymentDate: true,
        paymentMethod: true,

        purchase: {
          select: {
            id: true,
          },
        },

        reference: true,

        supplier: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SupplierPayment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async supplierPayment(
    @common.Param() params: SupplierPaymentWhereUniqueInput
  ): Promise<SupplierPayment | null> {
    const result = await this.service.supplierPayment({
      where: params,
      select: {
        amount: true,
        createdAt: true,
        id: true,
        notes: true,
        paymentDate: true,
        paymentMethod: true,

        purchase: {
          select: {
            id: true,
          },
        },

        reference: true,

        supplier: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SupplierPayment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSupplierPayment(
    @common.Param() params: SupplierPaymentWhereUniqueInput,
    @common.Body() data: SupplierPaymentUpdateInput
  ): Promise<SupplierPayment | null> {
    try {
      return await this.service.updateSupplierPayment({
        where: params,
        data: {
          ...data,

          purchase: data.purchase
            ? {
                connect: data.purchase,
              }
            : undefined,

          supplier: {
            connect: data.supplier,
          },
        },
        select: {
          amount: true,
          createdAt: true,
          id: true,
          notes: true,
          paymentDate: true,
          paymentMethod: true,

          purchase: {
            select: {
              id: true,
            },
          },

          reference: true,

          supplier: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SupplierPayment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSupplierPayment(
    @common.Param() params: SupplierPaymentWhereUniqueInput
  ): Promise<SupplierPayment | null> {
    try {
      return await this.service.deleteSupplierPayment({
        where: params,
        select: {
          amount: true,
          createdAt: true,
          id: true,
          notes: true,
          paymentDate: true,
          paymentMethod: true,

          purchase: {
            select: {
              id: true,
            },
          },

          reference: true,

          supplier: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
