/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DemandListItem as PrismaDemandListItem,
  DemandList as PrismaDemandList,
  OrderItem as PrismaOrderItem,
  Product as PrismaProduct,
  PurchaseItem as PrismaPurchaseItem,
} from "@prisma/client";

export class DemandListItemServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DemandListItemCountArgs, "select">
  ): Promise<number> {
    return this.prisma.demandListItem.count(args);
  }

  async demandListItems(
    args: Prisma.DemandListItemFindManyArgs
  ): Promise<PrismaDemandListItem[]> {
    return this.prisma.demandListItem.findMany(args);
  }
  async demandListItem(
    args: Prisma.DemandListItemFindUniqueArgs
  ): Promise<PrismaDemandListItem | null> {
    return this.prisma.demandListItem.findUnique(args);
  }
  async createDemandListItem(
    args: Prisma.DemandListItemCreateArgs
  ): Promise<PrismaDemandListItem> {
    return this.prisma.demandListItem.create(args);
  }
  async updateDemandListItem(
    args: Prisma.DemandListItemUpdateArgs
  ): Promise<PrismaDemandListItem> {
    return this.prisma.demandListItem.update(args);
  }
  async deleteDemandListItem(
    args: Prisma.DemandListItemDeleteArgs
  ): Promise<PrismaDemandListItem> {
    return this.prisma.demandListItem.delete(args);
  }

  async getDemandList(parentId: string): Promise<PrismaDemandList | null> {
    return this.prisma.demandListItem
      .findUnique({
        where: { id: parentId },
      })
      .demandList();
  }

  async getOrderItem(parentId: string): Promise<PrismaOrderItem | null> {
    return this.prisma.demandListItem
      .findUnique({
        where: { id: parentId },
      })
      .orderItem();
  }

  async getProduct(parentId: string): Promise<PrismaProduct | null> {
    return this.prisma.demandListItem
      .findUnique({
        where: { id: parentId },
      })
      .product();
  }

  async getPurchaseItem(parentId: string): Promise<PrismaPurchaseItem | null> {
    return this.prisma.demandListItem
      .findUnique({
        where: { id: parentId },
      })
      .purchaseItem();
  }
}
