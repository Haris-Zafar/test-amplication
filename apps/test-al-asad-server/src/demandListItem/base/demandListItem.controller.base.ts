/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DemandListItemService } from "../demandListItem.service";
import { DemandListItemCreateInput } from "./DemandListItemCreateInput";
import { DemandListItem } from "./DemandListItem";
import { DemandListItemFindManyArgs } from "./DemandListItemFindManyArgs";
import { DemandListItemWhereUniqueInput } from "./DemandListItemWhereUniqueInput";
import { DemandListItemUpdateInput } from "./DemandListItemUpdateInput";

export class DemandListItemControllerBase {
  constructor(protected readonly service: DemandListItemService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DemandListItem })
  async createDemandListItem(
    @common.Body() data: DemandListItemCreateInput
  ): Promise<DemandListItem> {
    return await this.service.createDemandListItem({
      data: {
        ...data,

        demandList: {
          connect: data.demandList,
        },

        orderItem: data.orderItem
          ? {
              connect: data.orderItem,
            }
          : undefined,

        product: {
          connect: data.product,
        },

        purchaseItem: data.purchaseItem
          ? {
              connect: data.purchaseItem,
            }
          : undefined,
      },
      select: {
        confirmedQuantity: true,
        createdAt: true,

        demandList: {
          select: {
            id: true,
          },
        },

        id: true,

        orderItem: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },

        purchaseItem: {
          select: {
            id: true,
          },
        },

        requestedQuantity: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DemandListItem] })
  @ApiNestedQuery(DemandListItemFindManyArgs)
  async demandListItems(
    @common.Req() request: Request
  ): Promise<DemandListItem[]> {
    const args = plainToClass(DemandListItemFindManyArgs, request.query);
    return this.service.demandListItems({
      ...args,
      select: {
        confirmedQuantity: true,
        createdAt: true,

        demandList: {
          select: {
            id: true,
          },
        },

        id: true,

        orderItem: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },

        purchaseItem: {
          select: {
            id: true,
          },
        },

        requestedQuantity: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DemandListItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async demandListItem(
    @common.Param() params: DemandListItemWhereUniqueInput
  ): Promise<DemandListItem | null> {
    const result = await this.service.demandListItem({
      where: params,
      select: {
        confirmedQuantity: true,
        createdAt: true,

        demandList: {
          select: {
            id: true,
          },
        },

        id: true,

        orderItem: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },

        purchaseItem: {
          select: {
            id: true,
          },
        },

        requestedQuantity: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DemandListItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDemandListItem(
    @common.Param() params: DemandListItemWhereUniqueInput,
    @common.Body() data: DemandListItemUpdateInput
  ): Promise<DemandListItem | null> {
    try {
      return await this.service.updateDemandListItem({
        where: params,
        data: {
          ...data,

          demandList: {
            connect: data.demandList,
          },

          orderItem: data.orderItem
            ? {
                connect: data.orderItem,
              }
            : undefined,

          product: {
            connect: data.product,
          },

          purchaseItem: data.purchaseItem
            ? {
                connect: data.purchaseItem,
              }
            : undefined,
        },
        select: {
          confirmedQuantity: true,
          createdAt: true,

          demandList: {
            select: {
              id: true,
            },
          },

          id: true,

          orderItem: {
            select: {
              id: true,
            },
          },

          product: {
            select: {
              id: true,
            },
          },

          purchaseItem: {
            select: {
              id: true,
            },
          },

          requestedQuantity: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DemandListItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDemandListItem(
    @common.Param() params: DemandListItemWhereUniqueInput
  ): Promise<DemandListItem | null> {
    try {
      return await this.service.deleteDemandListItem({
        where: params,
        select: {
          confirmedQuantity: true,
          createdAt: true,

          demandList: {
            select: {
              id: true,
            },
          },

          id: true,

          orderItem: {
            select: {
              id: true,
            },
          },

          product: {
            select: {
              id: true,
            },
          },

          purchaseItem: {
            select: {
              id: true,
            },
          },

          requestedQuantity: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
