/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsDate,
  ValidateNested,
  IsOptional,
  IsInt,
  Max,
  IsString,
  IsNumber,
  IsEnum,
} from "class-validator";
import { Type } from "class-transformer";
import { DemandListItem } from "../../demandListItem/base/DemandListItem";
import { Order } from "../../order/base/Order";
import { Product } from "../../product/base/Product";
import { EnumOrderItemStatus } from "./EnumOrderItemStatus";

@ObjectType()
class OrderItem {
  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: () => [DemandListItem],
  })
  @ValidateNested()
  @Type(() => DemandListItem)
  @IsOptional()
  demandListItems?: Array<DemandListItem>;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Max(99999999999)
  @Field(() => Number)
  fulfilledQuantity!: number;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: true,
    type: () => Order,
  })
  @ValidateNested()
  @Type(() => Order)
  order?: Order;

  @ApiProperty({
    required: true,
    type: () => Product,
  })
  @ValidateNested()
  @Type(() => Product)
  product?: Product;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Max(99999999999)
  @Field(() => Number)
  quantity!: number;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @Field(() => Number)
  sellPrice!: number;

  @ApiProperty({
    required: true,
    enum: EnumOrderItemStatus,
  })
  @IsEnum(EnumOrderItemStatus)
  @Field(() => EnumOrderItemStatus, {
    nullable: true,
  })
  status?: "PENDING" | "PARTIAL" | "COMPLETE" | "CANCELLED";

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { OrderItem as OrderItem };
