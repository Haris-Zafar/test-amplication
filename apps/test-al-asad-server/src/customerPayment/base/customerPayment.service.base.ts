/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CustomerPayment as PrismaCustomerPayment,
  Customer as PrismaCustomer,
  Order as PrismaOrder,
} from "@prisma/client";

export class CustomerPaymentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CustomerPaymentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.customerPayment.count(args);
  }

  async customerPayments(
    args: Prisma.CustomerPaymentFindManyArgs
  ): Promise<PrismaCustomerPayment[]> {
    return this.prisma.customerPayment.findMany(args);
  }
  async customerPayment(
    args: Prisma.CustomerPaymentFindUniqueArgs
  ): Promise<PrismaCustomerPayment | null> {
    return this.prisma.customerPayment.findUnique(args);
  }
  async createCustomerPayment(
    args: Prisma.CustomerPaymentCreateArgs
  ): Promise<PrismaCustomerPayment> {
    return this.prisma.customerPayment.create(args);
  }
  async updateCustomerPayment(
    args: Prisma.CustomerPaymentUpdateArgs
  ): Promise<PrismaCustomerPayment> {
    return this.prisma.customerPayment.update(args);
  }
  async deleteCustomerPayment(
    args: Prisma.CustomerPaymentDeleteArgs
  ): Promise<PrismaCustomerPayment> {
    return this.prisma.customerPayment.delete(args);
  }

  async getCustomer(parentId: string): Promise<PrismaCustomer | null> {
    return this.prisma.customerPayment
      .findUnique({
        where: { id: parentId },
      })
      .customer();
  }

  async getOrder(parentId: string): Promise<PrismaOrder | null> {
    return this.prisma.customerPayment
      .findUnique({
        where: { id: parentId },
      })
      .order();
  }
}
