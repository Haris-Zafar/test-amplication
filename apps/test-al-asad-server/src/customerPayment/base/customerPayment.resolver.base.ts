/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CustomerPayment } from "./CustomerPayment";
import { CustomerPaymentCountArgs } from "./CustomerPaymentCountArgs";
import { CustomerPaymentFindManyArgs } from "./CustomerPaymentFindManyArgs";
import { CustomerPaymentFindUniqueArgs } from "./CustomerPaymentFindUniqueArgs";
import { CreateCustomerPaymentArgs } from "./CreateCustomerPaymentArgs";
import { UpdateCustomerPaymentArgs } from "./UpdateCustomerPaymentArgs";
import { DeleteCustomerPaymentArgs } from "./DeleteCustomerPaymentArgs";
import { Customer } from "../../customer/base/Customer";
import { Order } from "../../order/base/Order";
import { CustomerPaymentService } from "../customerPayment.service";
@graphql.Resolver(() => CustomerPayment)
export class CustomerPaymentResolverBase {
  constructor(protected readonly service: CustomerPaymentService) {}

  async _customerPaymentsMeta(
    @graphql.Args() args: CustomerPaymentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CustomerPayment])
  async customerPayments(
    @graphql.Args() args: CustomerPaymentFindManyArgs
  ): Promise<CustomerPayment[]> {
    return this.service.customerPayments(args);
  }

  @graphql.Query(() => CustomerPayment, { nullable: true })
  async customerPayment(
    @graphql.Args() args: CustomerPaymentFindUniqueArgs
  ): Promise<CustomerPayment | null> {
    const result = await this.service.customerPayment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CustomerPayment)
  async createCustomerPayment(
    @graphql.Args() args: CreateCustomerPaymentArgs
  ): Promise<CustomerPayment> {
    return await this.service.createCustomerPayment({
      ...args,
      data: {
        ...args.data,

        customer: {
          connect: args.data.customer,
        },

        order: args.data.order
          ? {
              connect: args.data.order,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => CustomerPayment)
  async updateCustomerPayment(
    @graphql.Args() args: UpdateCustomerPaymentArgs
  ): Promise<CustomerPayment | null> {
    try {
      return await this.service.updateCustomerPayment({
        ...args,
        data: {
          ...args.data,

          customer: {
            connect: args.data.customer,
          },

          order: args.data.order
            ? {
                connect: args.data.order,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CustomerPayment)
  async deleteCustomerPayment(
    @graphql.Args() args: DeleteCustomerPaymentArgs
  ): Promise<CustomerPayment | null> {
    try {
      return await this.service.deleteCustomerPayment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Customer, {
    nullable: true,
    name: "customer",
  })
  async getCustomer(
    @graphql.Parent() parent: CustomerPayment
  ): Promise<Customer | null> {
    const result = await this.service.getCustomer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Order, {
    nullable: true,
    name: "order",
  })
  async getOrder(
    @graphql.Parent() parent: CustomerPayment
  ): Promise<Order | null> {
    const result = await this.service.getOrder(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
